(window.webpackJsonp=window.webpackJsonp||[]).push([[288],{852:function(v,_,s){"use strict";s.r(_);var e=s(6),t=Object(e.a)({},(function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("p",[v._v("字符串是 UTF-8 字符的一个序列（当字符为 ASCII 码时则占用 1 个字节，其它字符根据需要占用 2-4 个字节）。UTF-8 是被广泛使用的编码格式，是文本文件的标准编码，其它包括 XML 和 JSON 在内，也都使用该编码。由于该编码对占用字节长度的不定性，Go 中的字符串里面的字符也可能根据需要占用 1 至 4 个字节（示例见第 4.6 节），这与其它语言如 C++、Java 或者 Python 不同（Java 始终使用 2 个字节）。Go 这样做的好处是不仅减少了内存和硬盘空间占用，同时也不用像其它语言那样需要对使用 UTF-8 字符集的文本进行编码和解码。")]),v._v(" "),s("p",[v._v("字符串是一种值类型，且值不可变，即创建某个文本后你无法再次修改这个文本的内容；更深入地讲，字符串是字节的定长数组。")]),v._v(" "),s("p",[v._v("Go 支持以下 2 种形式的字面值：")]),v._v(" "),s("ul",[s("li",[s("p",[v._v("解释字符串：")]),v._v(" "),s("p",[v._v("该类字符串使用双引号括起来，其中的相关的转义字符将被替换，这些转义字符包括：")]),v._v(" "),s("ul",[s("li",[s("code",[v._v("\\n")]),v._v("：换行符")]),v._v(" "),s("li",[s("code",[v._v("\\r")]),v._v("：回车符")]),v._v(" "),s("li",[s("code",[v._v("\\t")]),v._v("：tab 键")]),v._v(" "),s("li",[s("code",[v._v("\\u")]),v._v(" 或 "),s("code",[v._v("\\U")]),v._v("：Unicode 字符")]),v._v(" "),s("li",[s("code",[v._v("\\\\")]),v._v("：反斜杠自身")])])]),v._v(" "),s("li",[s("p",[v._v("非解释字符串：")]),v._v(" "),s("p",[v._v("该类字符串使用反引号括起来，支持换行，例如：")]),v._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[v._v("  `This is a raw string \\n` 中的 `\\n\\` 会被原样输出。\n")])])])])]),v._v(" "),s("p",[v._v("和 C/C++不一样，Go 中的字符串是根据长度限定，而非特殊字符"),s("code",[v._v("\\0")]),v._v("。")]),v._v(" "),s("p",[s("code",[v._v("string")]),v._v(" 类型的零值为长度为零的字符串，即空字符串 "),s("code",[v._v('""')]),v._v("。")]),v._v(" "),s("p",[v._v("一般的比较运算符（"),s("code",[v._v("==")]),v._v("、"),s("code",[v._v("!=")]),v._v("、"),s("code",[v._v("<")]),v._v("、"),s("code",[v._v("<=")]),v._v("、"),s("code",[v._v(">=")]),v._v("、"),s("code",[v._v(">")]),v._v("）通过在内存中按字节比较来实现字符串的对比。你可以通过函数 "),s("code",[v._v("len()")]),v._v(" 来获取字符串所占的字节长度，例如："),s("code",[v._v("len(str)")]),v._v("。")]),v._v(" "),s("p",[v._v("字符串的内容（纯字节）可以通过标准索引法来获取，在中括号 "),s("code",[v._v("[]")]),v._v(" 内写入索引，索引从 0 开始计数：")]),v._v(" "),s("ul",[s("li",[v._v("字符串 str 的第 1 个字节："),s("code",[v._v("str[0]")])]),v._v(" "),s("li",[v._v("第 i 个字节："),s("code",[v._v("str[i - 1]")])]),v._v(" "),s("li",[v._v("最后 1 个字节："),s("code",[v._v("str[len(str)-1]")])])]),v._v(" "),s("p",[v._v("需要注意的是，这种转换方案只对纯 ASCII 码的字符串有效。")]),v._v(" "),s("p",[s("strong",[v._v("注意事项")]),v._v(" 获取字符串中某个字节的地址的行为是非法的，例如："),s("code",[v._v("&str[i]")]),v._v("。")]),v._v(" "),s("p",[s("strong",[v._v("字符串拼接符 "),s("code",[v._v("+")])])]),v._v(" "),s("p",[v._v("两个字符串 "),s("code",[v._v("s1")]),v._v(" 和 "),s("code",[v._v("s2")]),v._v(" 可以通过 "),s("code",[v._v("s := s1 + s2")]),v._v(" 拼接在一起。")]),v._v(" "),s("p",[s("code",[v._v("s2")]),v._v(" 追加在 "),s("code",[v._v("s1")]),v._v(" 尾部并生成一个新的字符串 "),s("code",[v._v("s")]),v._v("。")]),v._v(" "),s("p",[v._v("你可以通过以下方式来对代码中多行的字符串进行拼接：")]),v._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[v._v("str "),s("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":=")]),v._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[v._v('"Beginning of the string "')]),v._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[v._v('"second part of the string"')]),v._v("\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br")])]),s("p",[v._v("由于编译器行尾自动补全分号的缘故，加号 "),s("code",[v._v("+")]),v._v(" 必须放在第一行。")]),v._v(" "),s("p",[v._v("拼接的简写形式 "),s("code",[v._v("+=")]),v._v(" 也可以用于字符串：")]),v._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[v._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":=")]),v._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[v._v('"hel"')]),v._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[v._v('"lo,"')]),v._v("\ns "),s("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+=")]),v._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[v._v('"world!"')]),v._v("\nfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[v._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//输出 “hello, world!”")]),v._v("\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br")])]),s("p",[v._v("在循环中使用加号 "),s("code",[v._v("+")]),v._v(" 拼接字符串并不是最高效的做法，更好的办法是使用函数 "),s("code",[v._v("strings.Join()")]),v._v("（第 4.7.10 节），有没有更好的办法了？有！使用字节缓冲（"),s("code",[v._v("bytes.Buffer")]),v._v("）拼接更加给力（第 7.2.6 节）！")]),v._v(" "),s("p",[v._v("在第 7 章，我们会讲到通过将字符串看作是字节（byte）的切片（slice）来实现对其标准索引法的操作。会在第 5.4.1 节中讲到的 for 循环只会根据索引返回字符串中的纯字节，而在第 5.4.4 节（以及第 7.6.1 节的示例）将会展示如何使用 for-range 循环来实现对 Unicode 字符串的迭代操作。在下一节，我们会学习到许多有关字符串操作的函数和方法，同时 "),s("code",[v._v("fmt")]),v._v(" 包中的 "),s("code",[v._v("fmt.Sprint(x)")]),v._v(" 也可以格式化生成并返回你所需要的字符串（第 4.4.3 节）。")]),v._v(" "),s("p",[s("strong",[v._v("练习 4.6")]),v._v(" "),s("a",{attrs:{href:"exercises/chapter_4/count_characters.go"}},[v._v("count_characters.go")])]),v._v(" "),s("p",[v._v("创建一个用于统计字节和字符（rune）的程序，并对字符串 "),s("code",[v._v("asSASA ddd dsjkdsjs dk")]),v._v(" 进行分析，然后再分析 "),s("code",[v._v("asSASA ddd dsjkdsjsこん dk")]),v._v("，最后解释两者不同的原因（提示：使用 "),s("code",[v._v("unicode/utf8")]),v._v(" 包）。")])])}),[],!1,null,null,null);_.default=t.exports}}]);