(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{817:function(s,n,t){"use strict";t.r(n);var a=t(6),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("strong",[s._v("词法分析")]),s._v("，也叫做扫描scanner。它读取我们的代码，然后把它们按照预定的规则合并成一个个的标识tokens。同时，它会移除空白符，注释，等。最后，整个代码将被分割进一个tokens列表（或者说一维数组）。")]),s._v(" "),t("p",[t("strong",[s._v("语法分析")]),s._v("，也解析器。它会将词法分析出来的数组转化成树形的表达形式。同时，验证语法，语法如果有错的话，抛出语法错误。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/jamiebuilds/the-super-tiny-compiler",target:"_blank",rel:"noopener noreferrer"}},[s._v("the-super-tiny-compiler"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("code",[s._v("This is an ultra-simplified example of all the major pieces of a modern compiler written in easy to read JavaScript.Reading through the guided code will help you learn about how most compilers work from end to end.")])]),s._v(" "),t("blockquote",[t("p",[s._v("这是用易于阅读的 "),t("code",[s._v("JavaScript")]),s._v(" 编写的现代编译器所有主要部分的极简示例。通读指导性代码将帮助您了解大多数编译器如何从头到尾工作。")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'use strict'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * TTTTTTTTTTTTTTTTTTTTTTTHHHHHHHHH     HHHHHHHHHEEEEEEEEEEEEEEEEEEEEEE\n * T:::::::::::::::::::::TH:::::::H     H:::::::HE::::::::::::::::::::E\n * T:::::::::::::::::::::TH:::::::H     H:::::::HE::::::::::::::::::::E\n * T:::::TT:::::::TT:::::THH::::::H     H::::::HHEE::::::EEEEEEEEE::::E\n * TTTTTT  T:::::T  TTTTTT  H:::::H     H:::::H    E:::::E       EEEEEE\n *         T:::::T          H:::::H     H:::::H    E:::::E\n *         T:::::T          H::::::HHHHH::::::H    E::::::EEEEEEEEEE\n *         T:::::T          H:::::::::::::::::H    E:::::::::::::::E\n *         T:::::T          H:::::::::::::::::H    E:::::::::::::::E\n *         T:::::T          H::::::HHHHH::::::H    E::::::EEEEEEEEEE\n *         T:::::T          H:::::H     H:::::H    E:::::E\n *         T:::::T          H:::::H     H:::::H    E:::::E       EEEEEE\n *       TT:::::::TT      HH::::::H     H::::::HHEE::::::EEEEEEEE:::::E\n *       T:::::::::T      H:::::::H     H:::::::HE::::::::::::::::::::E\n *       T:::::::::T      H:::::::H     H:::::::HE::::::::::::::::::::E\n *       TTTTTTTTTTT      HHHHHHHHH     HHHHHHHHHEEEEEEEEEEEEEEEEEEEEEE\n *\n *    SSSSSSSSSSSSSSS UUUUUUUU     UUUUUUUUPPPPPPPPPPPPPPPPP   EEEEEEEEEEEEEEEEEEEEEERRRRRRRRRRRRRRRRR\n *  SS:::::::::::::::SU::::::U     U::::::UP::::::::::::::::P  E::::::::::::::::::::ER::::::::::::::::R\n * S:::::SSSSSS::::::SU::::::U     U::::::UP::::::PPPPPP:::::P E::::::::::::::::::::ER::::::RRRRRR:::::R\n * S:::::S     SSSSSSSUU:::::U     U:::::UUPP:::::P     P:::::PEE::::::EEEEEEEEE::::ERR:::::R     R:::::R\n * S:::::S             U:::::U     U:::::U   P::::P     P:::::P  E:::::E       EEEEEE  R::::R     R:::::R\n * S:::::S             U:::::U     U:::::U   P::::P     P:::::P  E:::::E               R::::R     R:::::R\n *  S::::SSSS          U:::::U     U:::::U   P::::PPPPPP:::::P   E::::::EEEEEEEEEE     R::::RRRRRR:::::R\n *   SS::::::SSSSS     U:::::U     U:::::U   P:::::::::::::PP    E:::::::::::::::E     R:::::::::::::RR\n *     SSS::::::::SS   U:::::U     U:::::U   P::::PPPPPPPPP      E:::::::::::::::E     R::::RRRRRR:::::R\n *        SSSSSS::::S  U:::::U     U:::::U   P::::P              E::::::EEEEEEEEEE     R::::R     R:::::R\n *             S:::::S U:::::U     U:::::U   P::::P              E:::::E               R::::R     R:::::R\n *             S:::::S U::::::U   U::::::U   P::::P              E:::::E       EEEEEE  R::::R     R:::::R\n * SSSSSSS     S:::::S U:::::::UUU:::::::U PP::::::PP          EE::::::EEEEEEEE:::::ERR:::::R     R:::::R\n * S::::::SSSSSS:::::S  UU:::::::::::::UU  P::::::::P          E::::::::::::::::::::ER::::::R     R:::::R\n * S:::::::::::::::SS     UU:::::::::UU    P::::::::P          E::::::::::::::::::::ER::::::R     R:::::R\n *  SSSSSSSSSSSSSSS         UUUUUUUUU      PPPPPPPPPP          EEEEEEEEEEEEEEEEEEEEEERRRRRRRR     RRRRRRR\n *\n * TTTTTTTTTTTTTTTTTTTTTTTIIIIIIIIIINNNNNNNN        NNNNNNNNYYYYYYY       YYYYYYY\n * T:::::::::::::::::::::TI::::::::IN:::::::N       N::::::NY:::::Y       Y:::::Y\n * T:::::::::::::::::::::TI::::::::IN::::::::N      N::::::NY:::::Y       Y:::::Y\n * T:::::TT:::::::TT:::::TII::::::IIN:::::::::N     N::::::NY::::::Y     Y::::::Y\n * TTTTTT  T:::::T  TTTTTT  I::::I  N::::::::::N    N::::::NYYY:::::Y   Y:::::YYY\n *         T:::::T          I::::I  N:::::::::::N   N::::::N   Y:::::Y Y:::::Y\n *         T:::::T          I::::I  N:::::::N::::N  N::::::N    Y:::::Y:::::Y\n *         T:::::T          I::::I  N::::::N N::::N N::::::N     Y:::::::::Y\n *         T:::::T          I::::I  N::::::N  N::::N:::::::N      Y:::::::Y\n *         T:::::T          I::::I  N::::::N   N:::::::::::N       Y:::::Y\n *         T:::::T          I::::I  N::::::N    N::::::::::N       Y:::::Y\n *         T:::::T          I::::I  N::::::N     N:::::::::N       Y:::::Y\n *       TT:::::::TT      II::::::IIN::::::N      N::::::::N       Y:::::Y\n *       T:::::::::T      I::::::::IN::::::N       N:::::::N    YYYY:::::YYYY\n *       T:::::::::T      I::::::::IN::::::N        N::::::N    Y:::::::::::Y\n *       TTTTTTTTTTT      IIIIIIIIIINNNNNNNN         NNNNNNN    YYYYYYYYYYYYY\n *\n *         CCCCCCCCCCCCC     OOOOOOOOO     MMMMMMMM               MMMMMMMMPPPPPPPPPPPPPPPPP   IIIIIIIIIILLLLLLLLLLL             EEEEEEEEEEEEEEEEEEEEEERRRRRRRRRRRRRRRRR\n *      CCC::::::::::::C   OO:::::::::OO   M:::::::M             M:::::::MP::::::::::::::::P  I::::::::IL:::::::::L             E::::::::::::::::::::ER::::::::::::::::R\n *    CC:::::::::::::::C OO:::::::::::::OO M::::::::M           M::::::::MP::::::PPPPPP:::::P I::::::::IL:::::::::L             E::::::::::::::::::::ER::::::RRRRRR:::::R\n *   C:::::CCCCCCCC::::CO:::::::OOO:::::::OM:::::::::M         M:::::::::MPP:::::P     P:::::PII::::::IILL:::::::LL             EE::::::EEEEEEEEE::::ERR:::::R     R:::::R\n *  C:::::C       CCCCCCO::::::O   O::::::OM::::::::::M       M::::::::::M  P::::P     P:::::P  I::::I    L:::::L                 E:::::E       EEEEEE  R::::R     R:::::R\n * C:::::C              O:::::O     O:::::OM:::::::::::M     M:::::::::::M  P::::P     P:::::P  I::::I    L:::::L                 E:::::E               R::::R     R:::::R\n * C:::::C              O:::::O     O:::::OM:::::::M::::M   M::::M:::::::M  P::::PPPPPP:::::P   I::::I    L:::::L                 E::::::EEEEEEEEEE     R::::RRRRRR:::::R\n * C:::::C              O:::::O     O:::::OM::::::M M::::M M::::M M::::::M  P:::::::::::::PP    I::::I    L:::::L                 E:::::::::::::::E     R:::::::::::::RR\n * C:::::C              O:::::O     O:::::OM::::::M  M::::M::::M  M::::::M  P::::PPPPPPPPP      I::::I    L:::::L                 E:::::::::::::::E     R::::RRRRRR:::::R\n * C:::::C              O:::::O     O:::::OM::::::M   M:::::::M   M::::::M  P::::P              I::::I    L:::::L                 E::::::EEEEEEEEEE     R::::R     R:::::R\n * C:::::C              O:::::O     O:::::OM::::::M    M:::::M    M::::::M  P::::P              I::::I    L:::::L                 E:::::E               R::::R     R:::::R\n *  C:::::C       CCCCCCO::::::O   O::::::OM::::::M     MMMMM     M::::::M  P::::P              I::::I    L:::::L         LLLLLL  E:::::E       EEEEEE  R::::R     R:::::R\n *   C:::::CCCCCCCC::::CO:::::::OOO:::::::OM::::::M               M::::::MPP::::::PP          II::::::IILL:::::::LLLLLLLLL:::::LEE::::::EEEEEEEE:::::ERR:::::R     R:::::R\n *    CC:::::::::::::::C OO:::::::::::::OO M::::::M               M::::::MP::::::::P          I::::::::IL::::::::::::::::::::::LE::::::::::::::::::::ER::::::R     R:::::R\n *      CCC::::::::::::C   OO:::::::::OO   M::::::M               M::::::MP::::::::P          I::::::::IL::::::::::::::::::::::LE::::::::::::::::::::ER::::::R     R:::::R\n *         CCCCCCCCCCCCC     OOOOOOOOO     MMMMMMMM               MMMMMMMMPPPPPPPPPP          IIIIIIIIIILLLLLLLLLLLLLLLLLLLLLLLLEEEEEEEEEEEEEEEEEEEEEERRRRRRRR     RRRRRRR\n *\n * =======================================================================================================================================================================\n * =======================================================================================================================================================================\n * =======================================================================================================================================================================\n * =======================================================================================================================================================================\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Today we're going to write a compiler together. But not just any compiler... A\n * super duper teeny tiny compiler! A compiler that is so small that if you\n * remove all the comments this file would only be ~200 lines of actual code.\n *\n * We're going to compile some lisp-like function calls into some C-like\n * function calls.\n *\n * If you are not familiar with one or the other. I'll just give you a quick intro.\n *\n * If we had two functions `add` and `subtract` they would be written like this:\n *\n *                  LISP                      C\n *\n *   2 + 2          (add 2 2)                 add(2, 2)\n *   4 - 2          (subtract 4 2)            subtract(4, 2)\n *   2 + (4 - 2)    (add 2 (subtract 4 2))    add(2, subtract(4, 2))\n *\n * Easy peezy right?\n *\n * Well good, because this is exactly what we are going to compile. While this\n * is neither a complete LISP or C syntax, it will be enough of the syntax to\n * demonstrate many of the major pieces of a modern compiler.\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Most compilers break down into three primary stages: Parsing, Transformation,\n * and Code Generation\n *\n * 1. *Parsing* is taking raw code and turning it into a more abstract\n *    representation of the code.\n *\n * 2. *Transformation* takes this abstract representation and manipulates to do\n *    whatever the compiler wants it to.\n *\n * 3. *Code Generation* takes the transformed representation of the code and\n *    turns it into new code.\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Parsing\n * -------\n *\n * Parsing typically gets broken down into two phases: Lexical Analysis and\n * Syntactic Analysis.\n *\n * 1. *Lexical Analysis* takes the raw code and splits it apart into these things\n *    called tokens by a thing called a tokenizer (or lexer).\n *\n *    Tokens are an array of tiny little objects that describe an isolated piece\n *    of the syntax. They could be numbers, labels, punctuation, operators,\n *    whatever.\n *\n * 2. *Syntactic Analysis* takes the tokens and reformats them into a\n *    representation that describes each part of the syntax and their relation\n *    to one another. This is known as an intermediate representation or\n *    Abstract Syntax Tree.\n *\n *    An Abstract Syntax Tree, or AST for short, is a deeply nested object that\n *    represents code in a way that is both easy to work with and tells us a lot\n *    of information.\n *\n * For the following syntax:\n *\n *   (add 2 (subtract 4 2))\n *\n * Tokens might look something like this:\n *\n *   [\n *     { type: 'paren',  value: '('        },\n *     { type: 'name',   value: 'add'      },\n *     { type: 'number', value: '2'        },\n *     { type: 'paren',  value: '('        },\n *     { type: 'name',   value: 'subtract' },\n *     { type: 'number', value: '4'        },\n *     { type: 'number', value: '2'        },\n *     { type: 'paren',  value: ')'        },\n *     { type: 'paren',  value: ')'        },\n *   ]\n *\n * And an Abstract Syntax Tree (AST) might look like this:\n *\n *   {\n *     type: 'Program',\n *     body: [{\n *       type: 'CallExpression',\n *       name: 'add',\n *       params: [{\n *         type: 'NumberLiteral',\n *         value: '2',\n *       }, {\n *         type: 'CallExpression',\n *         name: 'subtract',\n *         params: [{\n *           type: 'NumberLiteral',\n *           value: '4',\n *         }, {\n *           type: 'NumberLiteral',\n *           value: '2',\n *         }]\n *       }]\n *     }]\n *   }\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Transformation\n * --------------\n *\n * The next type of stage for a compiler is transformation. Again, this just\n * takes the AST from the last step and makes changes to it. It can manipulate\n * the AST in the same language or it can translate it into an entirely new\n * language.\n *\n * Let’s look at how we would transform an AST.\n *\n * You might notice that our AST has elements within it that look very similar.\n * There are these objects with a type property. Each of these are known as an\n * AST Node. These nodes have defined properties on them that describe one\n * isolated part of the tree.\n *\n * We can have a node for a \"NumberLiteral\":\n *\n *   {\n *     type: 'NumberLiteral',\n *     value: '2',\n *   }\n *\n * Or maybe a node for a \"CallExpression\":\n *\n *   {\n *     type: 'CallExpression',\n *     name: 'subtract',\n *     params: [...nested nodes go here...],\n *   }\n *\n * When transforming the AST we can manipulate nodes by\n * adding/removing/replacing properties, we can add new nodes, remove nodes, or\n * we could leave the existing AST alone and create an entirely new one based\n * on it.\n *\n * Since we’re targeting a new language, we’re going to focus on creating an\n * entirely new AST that is specific to the target language.\n *\n * Traversal\n * ---------\n *\n * In order to navigate through all of these nodes, we need to be able to\n * traverse through them. This traversal process goes to each node in the AST\n * depth-first.\n *\n *   {\n *     type: 'Program',\n *     body: [{\n *       type: 'CallExpression',\n *       name: 'add',\n *       params: [{\n *         type: 'NumberLiteral',\n *         value: '2'\n *       }, {\n *         type: 'CallExpression',\n *         name: 'subtract',\n *         params: [{\n *           type: 'NumberLiteral',\n *           value: '4'\n *         }, {\n *           type: 'NumberLiteral',\n *           value: '2'\n *         }]\n *       }]\n *     }]\n *   }\n *\n * So for the above AST we would go:\n *\n *   1. Program - Starting at the top level of the AST\n *   2. CallExpression (add) - Moving to the first element of the Program's body\n *   3. NumberLiteral (2) - Moving to the first element of CallExpression's params\n *   4. CallExpression (subtract) - Moving to the second element of CallExpression's params\n *   5. NumberLiteral (4) - Moving to the first element of CallExpression's params\n *   6. NumberLiteral (2) - Moving to the second element of CallExpression's params\n *\n * If we were manipulating this AST directly, instead of creating a separate AST,\n * we would likely introduce all sorts of abstractions here. But just visiting\n * each node in the tree is enough for what we're trying to do.\n *\n * The reason I use the word \"visiting\" is because there is this pattern of how\n * to represent operations on elements of an object structure.\n *\n * Visitors\n * --------\n *\n * The basic idea here is that we are going to create a “visitor” object that\n * has methods that will accept different node types.\n *\n *   var visitor = {\n *     NumberLiteral() {},\n *     CallExpression() {},\n *   };\n *\n * When we traverse our AST, we will call the methods on this visitor whenever we\n * \"enter\" a node of a matching type.\n *\n * In order to make this useful we will also pass the node and a reference to\n * the parent node.\n *\n *   var visitor = {\n *     NumberLiteral(node, parent) {},\n *     CallExpression(node, parent) {},\n *   };\n *\n * However, there also exists the possibility of calling things on \"exit\". Imagine\n * our tree structure from before in list form:\n *\n *   - Program\n *     - CallExpression\n *       - NumberLiteral\n *       - CallExpression\n *         - NumberLiteral\n *         - NumberLiteral\n *\n * As we traverse down, we're going to reach branches with dead ends. As we\n * finish each branch of the tree we \"exit\" it. So going down the tree we\n * \"enter\" each node, and going back up we \"exit\".\n *\n *   -> Program (enter)\n *     -> CallExpression (enter)\n *       -> Number Literal (enter)\n *       <- Number Literal (exit)\n *       -> Call Expression (enter)\n *          -> Number Literal (enter)\n *          <- Number Literal (exit)\n *          -> Number Literal (enter)\n *          <- Number Literal (exit)\n *       <- CallExpression (exit)\n *     <- CallExpression (exit)\n *   <- Program (exit)\n *\n * In order to support that, the final form of our visitor will look like this:\n *\n *   var visitor = {\n *     NumberLiteral: {\n *       enter(node, parent) {},\n *       exit(node, parent) {},\n *     }\n *   };\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Code Generation\n * ---------------\n *\n * The final phase of a compiler is code generation. Sometimes compilers will do\n * things that overlap with transformation, but for the most part code\n * generation just means take our AST and string-ify code back out.\n *\n * Code generators work several different ways, some compilers will reuse the\n * tokens from earlier, others will have created a separate representation of\n * the code so that they can print nodes linearly, but from what I can tell most\n * will use the same AST we just created, which is what we’re going to focus on.\n *\n * Effectively our code generator will know how to “print” all of the different\n * node types of the AST, and it will recursively call itself to print nested\n * nodes until everything is printed into one long string of code.\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * And that's it! That's all the different pieces of a compiler.\n *\n * Now that isn’t to say every compiler looks exactly like I described here.\n * Compilers serve many different purposes, and they might need more steps than\n * I have detailed.\n *\n * But now you should have a general high-level idea of what most compilers look\n * like.\n *\n * Now that I’ve explained all of this, you’re all good to go write your own\n * compilers right?\n *\n * Just kidding, that's what I'm here to help with :P\n *\n * So let's begin...\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * ============================================================================\n *                                   (/^▽^)/\n *                                THE TOKENIZER!\n * ============================================================================\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * We're gonna start off with our first phase of parsing, lexical analysis, with\n * the tokenizer.\n *\n * We're just going to take our string of code and break it down into an array\n * of tokens.\n *\n *   (add 2 (subtract 4 2))   =>   [{ type: 'paren', value: '(' }, ...]\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We start by accepting an input string of code, and we're gonna set up two")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// things...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tokenizer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// A `current` variable for tracking our position in the code like a cursor.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And a `tokens` array for pushing our tokens to.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" tokens "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We start by creating a `while` loop where we are setting up our `current`")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// variable to be incremented as much as we want `inside` the loop.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We do this because we may want to increment `current` many times within a")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// single loop because our tokens can be any length.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We're also going to store the `current` character in the `input`.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The first thing we want to check for is an open parenthesis. This will")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// later be used for `CallExpression` but for now we only care about the")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// character.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We check to see if we have an open parenthesis:")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If we do, we push a new token with the type `paren` and set the value")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// to an open parenthesis.")]),s._v("\n      tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paren'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Then we increment `current`")]),s._v("\n      current"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And we `continue` onto the next cycle of the loop.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Next we're going to check for a closing parenthesis. We do the same exact")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// thing as before: Check for a closing parenthesis, add a new token,")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// increment `current`, and `continue`.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paren'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      current"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Moving on, we're now going to check for whitespace. This is interesting")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// because we care that whitespace exists to separate characters, but it")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// isn't actually important for us to store as a token. We would only throw")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// it out later.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// So here we're just going to test for existence and if it does exist we're")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// going to just `continue` on.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WHITESPACE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\s")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("WHITESPACE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      current"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The next type of token is a number. This is different than what we have")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// seen before because a number could be any number of characters and we")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// want to capture the entire sequence of characters as one token.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   (add 123 456)")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//        ^^^ ^^^")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//        Only two separate tokens")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// So we start this off when we encounter the first number in a sequence.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NUMBERS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("[0-9]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NUMBERS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We're going to create a `value` string that we are going to push")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// characters to.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Then we're going to loop through each character in the sequence until")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// we encounter a character that is not a number, pushing each character")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// that is a number to our `value` and incrementing `current` as we go.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NUMBERS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// After that we push our `number` token to the `tokens` array.")]),s._v("\n      tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'number'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And we continue on.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll also add support for strings in our language which will be any")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// text surrounded by double quotes (").')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//   (concat "foo" "bar")')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//            ^^^   ^^^ string tokens")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll start by checking for the opening quote:")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Keep a `value` variable for building up our string token.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll skip the opening double quote in our token.")]),s._v("\n      char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Then we'll iterate through each character until we reach another")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// double quote.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Skip the closing double quote.")]),s._v("\n      char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And add our `string` token to the `tokens` array.")]),s._v("\n      tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'string'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The last type of token will be a `name` token. This is a sequence of")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// letters instead of numbers, that are the names of functions in our lisp")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// syntax.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   (add 2 4)")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//    ^^^")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//    Name token")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LETTERS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("[a-z]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("i")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LETTERS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Again we're just going to loop through all the letters pushing them to")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a value.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LETTERS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        char "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And pushing that value as a token with the type `name` and continuing.")]),s._v("\n      tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Finally if we have not matched a character by now, we're going to throw")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// an error and completely exit.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I dont know what this character is: '")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Then at the end of our `tokenizer` we simply return the tokens array.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * ============================================================================\n *                                 ヽ/❀o ل͜ o\\ﾉ\n *                                THE PARSER!!!\n * ============================================================================\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * For our parser we're going to take our array of tokens and turn it into an\n * AST.\n *\n *   [{ type: 'paren', value: '(' }, ...]   =>   { type: 'Program', body: [...] }\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Okay, so we define a `parser` function that accepts our array of `tokens`.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parser")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("tokens")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Again we keep a `current` variable that we will use as a cursor.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// But this time we're going to use recursion instead of a `while` loop. So we")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// define a `walk` function.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("walk")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Inside the walk function we start by grabbing the `current` token.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" token "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We're going to split each type of token off into a different code path,")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// starting off with `number` tokens.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We test to see if we have a `number` token.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'number'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If we have one, we'll increment `current`.")]),s._v("\n      current"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And we'll return a new AST node called `NumberLiteral` and setting its")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// value to the value of our token.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'NumberLiteral'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If we have a string we will do the same as number and create a")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `StringLiteral` node.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'string'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      current"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'StringLiteral'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Next we're going to look for CallExpressions. We start this off when we")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// encounter an open parenthesis.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n      token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paren'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("\n      token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll increment `current` to skip the parenthesis since we don't care")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// about it in our AST.")]),s._v("\n      token "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We create a base node with the type `CallExpression`, and we're going")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// to set the name as the current token's value since the next token after")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the open parenthesis is the name of the function.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CallExpression'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        params"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We increment `current` *again* to skip the name token.")]),s._v("\n      token "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And now we want to loop through each token that will be the `params` of")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// our `CallExpression` until we encounter a closing parenthesis.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Now this is where recursion comes in. Instead of trying to parse a")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// potentially infinitely nested set of nodes we're going to rely on")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// recursion to resolve things.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// To explain this, let's take our Lisp code. You can see that the")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// parameters of the `add` are a number and a nested `CallExpression` that")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// includes its own numbers.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   (add 2 (subtract 4 2))")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// You'll also notice that in our tokens array we have multiple closing")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// parenthesis.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   [")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'paren',  value: '('        },")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'name',   value: 'add'      },")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'number', value: '2'        },")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'paren',  value: '('        },")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'name',   value: 'subtract' },")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'number', value: '4'        },")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'number', value: '2'        },")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'paren',  value: ')'        }, <<< Closing parenthesis")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     { type: 'paren',  value: ')'        }, <<< Closing parenthesis")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   ]")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We're going to rely on the nested `walk` function to increment our")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `current` variable past any nested `CallExpression`.")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// So we create a `while` loop that will continue until it encounters a")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// token with a `type` of `'paren'` and a `value` of a closing")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// parenthesis.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paren'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'paren'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// we'll call the `walk` function which will return a `node` and we'll")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// push it into our `node.params`.")]),s._v("\n        node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("params"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("walk")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        token "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Finally we will increment `current` one last time to skip the closing")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// parenthesis.")]),s._v("\n      current"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And return the node.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Again, if we haven't recognized the token type by now we're going to")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// throw an error.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("token"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Now, we're going to create our AST which will have a root which is a")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `Program` node.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" ast "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Program'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    body"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And we're going to kickstart our `walk` function, pushing nodes to our")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `ast.body` array.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The reason we are doing this inside a loop is because our program can have")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `CallExpression` after one another instead of being nested.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   (add 2 2)")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   (subtract 4 2)")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("current "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("walk")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// At the end of our parser we'll return the AST.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * ============================================================================\n *                                 ⌒(❀>◞౪◟<❀)⌒\n *                               THE TRAVERSER!!!\n * ============================================================================\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * So now we have our AST, and we want to be able to visit different nodes with\n * a visitor. We need to be able to call the methods on the visitor whenever we\n * encounter a node with a matching type.\n *\n *   traverse(ast, {\n *     Program: {\n *       enter(node, parent) {\n *         // ...\n *       },\n *       exit(node, parent) {\n *         // ...\n *       },\n *     },\n *\n *     CallExpression: {\n *       enter(node, parent) {\n *         // ...\n *       },\n *       exit(node, parent) {\n *         // ...\n *       },\n *     },\n *\n *     NumberLiteral: {\n *       enter(node, parent) {\n *         // ...\n *       },\n *       exit(node, parent) {\n *         // ...\n *       },\n *     },\n *   });\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// So we define a traverser function which accepts an AST and a")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// visitor. Inside we're going to define two functions...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("traverser")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("ast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" visitor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// A `traverseArray` function that will allow us to iterate over an array and")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// call the next function that we will define: `traverseNode`.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("traverseArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("child")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("traverseNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("child"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `traverseNode` will accept a `node` and its `parent` node. So that it can")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pass both to our visitor methods.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("traverseNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We start by testing for the existence of a method on the visitor with a")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// matching `type`.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" methods "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" visitor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If there is an `enter` method for this node type we'll call it with the")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `node` and its `parent`.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("methods "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" methods"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("enter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      methods"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("enter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Next we are going to split things up by the current node type.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll start with our top level `Program`. Since Program nodes have a")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// property named body that has an array of nodes, we will call")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `traverseArray` to traverse down into them.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (Remember that `traverseArray` will in turn call `traverseNode` so  we")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// are causing the tree to be traversed recursively)")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Program'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("traverseArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Next we do the same with `CallExpression` and traverse their `params`.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CallExpression'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("traverseArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("params"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// In the cases of `NumberLiteral` and `StringLiteral` we don't have any")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// child nodes to visit, so we'll just break.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'NumberLiteral'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'StringLiteral'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And again, if we haven't recognized the node type then we'll throw an")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// error.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If there is an `exit` method for this node type we'll call it with the")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `node` and its `parent`.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("methods "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" methods"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      methods"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Finally we kickstart the traverser by calling `traverseNode` with our ast")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// with no `parent` because the top level of the AST doesn't have a parent.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("traverseNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * ============================================================================\n *                                   ⁽(◍˃̵͈̑ᴗ˂̵͈̑)⁽\n *                              THE TRANSFORMER!!!\n * ============================================================================\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Next up, the transformer. Our transformer is going to take the AST that we\n * have built and pass it to our traverser function with a visitor and will\n * create a new ast.\n *\n * ----------------------------------------------------------------------------\n *   Original AST                     |   Transformed AST\n * ----------------------------------------------------------------------------\n *   {                                |   {\n *     type: 'Program',               |     type: 'Program',\n *     body: [{                       |     body: [{\n *       type: 'CallExpression',      |       type: 'ExpressionStatement',\n *       name: 'add',                 |       expression: {\n *       params: [{                   |         type: 'CallExpression',\n *         type: 'NumberLiteral',     |         callee: {\n *         value: '2'                 |           type: 'Identifier',\n *       }, {                         |           name: 'add'\n *         type: 'CallExpression',    |         },\n *         name: 'subtract',          |         arguments: [{\n *         params: [{                 |           type: 'NumberLiteral',\n *           type: 'NumberLiteral',   |           value: '2'\n *           value: '4'               |         }, {\n *         }, {                       |           type: 'CallExpression',\n *           type: 'NumberLiteral',   |           callee: {\n *           value: '2'               |             type: 'Identifier',\n *         }]                         |             name: 'subtract'\n *       }]                           |           },\n *     }]                             |           arguments: [{\n *   }                                |             type: 'NumberLiteral',\n *                                    |             value: '4'\n * ---------------------------------- |           }, {\n *                                    |             type: 'NumberLiteral',\n *                                    |             value: '2'\n *                                    |           }]\n *  (sorry the other one is longer.)  |         }\n *                                    |       }\n *                                    |     }]\n *                                    |   }\n * ----------------------------------------------------------------------------\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// So we have our transformer function which will accept the lisp ast.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transformer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("ast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll create a `newAst` which like our previous AST will have a program")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// node.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newAst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Program'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    body"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Next I'm going to cheat a little and create a bit of a hack. We're going to")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// use a property named `context` on our parent nodes that we're going to push")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nodes to their parent's `context`. Normally you would have a better")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// abstraction than this, but for our purposes this keeps things simple.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Just take note that the context is a reference *from* the old ast *to* the")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// new ast.")]),s._v("\n  ast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_context "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newAst"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll start by calling the traverser function with our ast and a visitor.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("traverser")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The first visitor method accepts any `NumberLiteral`")]),s._v("\n    NumberLiteral"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll visit them on enter.")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("enter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll create a new node also named `NumberLiteral` that we will push to")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// the parent context.")]),s._v("\n        parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'NumberLiteral'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Next we have `StringLiteral`")]),s._v("\n    StringLiteral"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("enter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'StringLiteral'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Next up, `CallExpression`.")]),s._v("\n    CallExpression"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("enter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" parent")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We start creating a new node `CallExpression` with a nested")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `Identifier`.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" expression "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CallExpression'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          callee"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Identifier'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          arguments"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Next we're going to define a new context on the original")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `CallExpression` node that will reference the `expression`'s arguments")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// so that we can push arguments.")]),s._v("\n        node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_context "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" expression"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("arguments"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Then we're going to check if the parent node is a `CallExpression`.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If it is not...")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CallExpression'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We're going to wrap our `CallExpression` node with an")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `ExpressionStatement`. We do this because the top level")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `CallExpression` in JavaScript are actually statements.")]),s._v("\n          expression "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ExpressionStatement'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            expression"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" expression"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Last, we push our (possibly wrapped) `CallExpression` to the `parent`'s")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// `context`.")]),s._v("\n        parent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("expression"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// At the end of our transformer function we'll return the new ast that we")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// just created.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" newAst"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * ============================================================================\n *                               ヾ（〃＾∇＾）ﾉ♪\n *                            THE CODE GENERATOR!!!!\n * ============================================================================\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * Now let's move onto our last phase: The Code Generator.\n *\n * Our code generator is going to recursively call itself to print each node in\n * the tree into one giant string.\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("codeGenerator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("node")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// We'll break things down by the `type` of the `node`.")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("switch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// If we have a `Program` node. We will map through each node in the `body`")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// and run them through the code generator and join them with a newline.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Program'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("codeGenerator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// For `ExpressionStatement` we'll call the code generator on the nested")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// expression and we'll add a semicolon...")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ExpressionStatement'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("codeGenerator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("expression"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("';'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// << (...because we like to code the *correct* way)")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// For `CallExpression` we will print the `callee`, add an open")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// parenthesis, we'll map through each node in the `arguments` array and run")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// them through the code generator, joining them with a comma, and then")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// we'll add a closing parenthesis.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CallExpression'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("codeGenerator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("callee"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n        node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("arguments"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("codeGenerator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("', '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// For `Identifier` we'll just return the `node`'s name.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Identifier'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// For `NumberLiteral` we'll just return the `node`'s value.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'NumberLiteral'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// For `StringLiteral` we'll add quotations around the `node`'s value.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'StringLiteral'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// And if we haven't recognized the node, we'll throw an error.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeError")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * ============================================================================\n *                                  (۶* ‘ヮ’)۶”\n *                         !!!!!!!!THE COMPILER!!!!!!!!\n * ============================================================================\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * FINALLY! We'll create our `compiler` function. Here we will link together\n * every part of the pipeline.\n *\n *   1. input  => tokenizer   => tokens\n *   2. tokens => parser      => ast\n *   3. ast    => transformer => newAst\n *   4. newAst => generator   => output\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compiler")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" tokens "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tokenizer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("input"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" ast    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("parser")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tokens"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" newAst "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("transformer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" output "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("codeGenerator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("newAst"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// and simply return the output!")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" output"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * ============================================================================\n *                                   (๑˃̵ᴗ˂̵)و\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!YOU MADE IT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n * ============================================================================\n */")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Now I'm just exporting everything...")]),s._v("\nmodule"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  tokenizer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  parser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  traverser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  transformer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  codeGenerator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  compiler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br"),t("span",{staticClass:"line-number"},[s._v("140")]),t("br"),t("span",{staticClass:"line-number"},[s._v("141")]),t("br"),t("span",{staticClass:"line-number"},[s._v("142")]),t("br"),t("span",{staticClass:"line-number"},[s._v("143")]),t("br"),t("span",{staticClass:"line-number"},[s._v("144")]),t("br"),t("span",{staticClass:"line-number"},[s._v("145")]),t("br"),t("span",{staticClass:"line-number"},[s._v("146")]),t("br"),t("span",{staticClass:"line-number"},[s._v("147")]),t("br"),t("span",{staticClass:"line-number"},[s._v("148")]),t("br"),t("span",{staticClass:"line-number"},[s._v("149")]),t("br"),t("span",{staticClass:"line-number"},[s._v("150")]),t("br"),t("span",{staticClass:"line-number"},[s._v("151")]),t("br"),t("span",{staticClass:"line-number"},[s._v("152")]),t("br"),t("span",{staticClass:"line-number"},[s._v("153")]),t("br"),t("span",{staticClass:"line-number"},[s._v("154")]),t("br"),t("span",{staticClass:"line-number"},[s._v("155")]),t("br"),t("span",{staticClass:"line-number"},[s._v("156")]),t("br"),t("span",{staticClass:"line-number"},[s._v("157")]),t("br"),t("span",{staticClass:"line-number"},[s._v("158")]),t("br"),t("span",{staticClass:"line-number"},[s._v("159")]),t("br"),t("span",{staticClass:"line-number"},[s._v("160")]),t("br"),t("span",{staticClass:"line-number"},[s._v("161")]),t("br"),t("span",{staticClass:"line-number"},[s._v("162")]),t("br"),t("span",{staticClass:"line-number"},[s._v("163")]),t("br"),t("span",{staticClass:"line-number"},[s._v("164")]),t("br"),t("span",{staticClass:"line-number"},[s._v("165")]),t("br"),t("span",{staticClass:"line-number"},[s._v("166")]),t("br"),t("span",{staticClass:"line-number"},[s._v("167")]),t("br"),t("span",{staticClass:"line-number"},[s._v("168")]),t("br"),t("span",{staticClass:"line-number"},[s._v("169")]),t("br"),t("span",{staticClass:"line-number"},[s._v("170")]),t("br"),t("span",{staticClass:"line-number"},[s._v("171")]),t("br"),t("span",{staticClass:"line-number"},[s._v("172")]),t("br"),t("span",{staticClass:"line-number"},[s._v("173")]),t("br"),t("span",{staticClass:"line-number"},[s._v("174")]),t("br"),t("span",{staticClass:"line-number"},[s._v("175")]),t("br"),t("span",{staticClass:"line-number"},[s._v("176")]),t("br"),t("span",{staticClass:"line-number"},[s._v("177")]),t("br"),t("span",{staticClass:"line-number"},[s._v("178")]),t("br"),t("span",{staticClass:"line-number"},[s._v("179")]),t("br"),t("span",{staticClass:"line-number"},[s._v("180")]),t("br"),t("span",{staticClass:"line-number"},[s._v("181")]),t("br"),t("span",{staticClass:"line-number"},[s._v("182")]),t("br"),t("span",{staticClass:"line-number"},[s._v("183")]),t("br"),t("span",{staticClass:"line-number"},[s._v("184")]),t("br"),t("span",{staticClass:"line-number"},[s._v("185")]),t("br"),t("span",{staticClass:"line-number"},[s._v("186")]),t("br"),t("span",{staticClass:"line-number"},[s._v("187")]),t("br"),t("span",{staticClass:"line-number"},[s._v("188")]),t("br"),t("span",{staticClass:"line-number"},[s._v("189")]),t("br"),t("span",{staticClass:"line-number"},[s._v("190")]),t("br"),t("span",{staticClass:"line-number"},[s._v("191")]),t("br"),t("span",{staticClass:"line-number"},[s._v("192")]),t("br"),t("span",{staticClass:"line-number"},[s._v("193")]),t("br"),t("span",{staticClass:"line-number"},[s._v("194")]),t("br"),t("span",{staticClass:"line-number"},[s._v("195")]),t("br"),t("span",{staticClass:"line-number"},[s._v("196")]),t("br"),t("span",{staticClass:"line-number"},[s._v("197")]),t("br"),t("span",{staticClass:"line-number"},[s._v("198")]),t("br"),t("span",{staticClass:"line-number"},[s._v("199")]),t("br"),t("span",{staticClass:"line-number"},[s._v("200")]),t("br"),t("span",{staticClass:"line-number"},[s._v("201")]),t("br"),t("span",{staticClass:"line-number"},[s._v("202")]),t("br"),t("span",{staticClass:"line-number"},[s._v("203")]),t("br"),t("span",{staticClass:"line-number"},[s._v("204")]),t("br"),t("span",{staticClass:"line-number"},[s._v("205")]),t("br"),t("span",{staticClass:"line-number"},[s._v("206")]),t("br"),t("span",{staticClass:"line-number"},[s._v("207")]),t("br"),t("span",{staticClass:"line-number"},[s._v("208")]),t("br"),t("span",{staticClass:"line-number"},[s._v("209")]),t("br"),t("span",{staticClass:"line-number"},[s._v("210")]),t("br"),t("span",{staticClass:"line-number"},[s._v("211")]),t("br"),t("span",{staticClass:"line-number"},[s._v("212")]),t("br"),t("span",{staticClass:"line-number"},[s._v("213")]),t("br"),t("span",{staticClass:"line-number"},[s._v("214")]),t("br"),t("span",{staticClass:"line-number"},[s._v("215")]),t("br"),t("span",{staticClass:"line-number"},[s._v("216")]),t("br"),t("span",{staticClass:"line-number"},[s._v("217")]),t("br"),t("span",{staticClass:"line-number"},[s._v("218")]),t("br"),t("span",{staticClass:"line-number"},[s._v("219")]),t("br"),t("span",{staticClass:"line-number"},[s._v("220")]),t("br"),t("span",{staticClass:"line-number"},[s._v("221")]),t("br"),t("span",{staticClass:"line-number"},[s._v("222")]),t("br"),t("span",{staticClass:"line-number"},[s._v("223")]),t("br"),t("span",{staticClass:"line-number"},[s._v("224")]),t("br"),t("span",{staticClass:"line-number"},[s._v("225")]),t("br"),t("span",{staticClass:"line-number"},[s._v("226")]),t("br"),t("span",{staticClass:"line-number"},[s._v("227")]),t("br"),t("span",{staticClass:"line-number"},[s._v("228")]),t("br"),t("span",{staticClass:"line-number"},[s._v("229")]),t("br"),t("span",{staticClass:"line-number"},[s._v("230")]),t("br"),t("span",{staticClass:"line-number"},[s._v("231")]),t("br"),t("span",{staticClass:"line-number"},[s._v("232")]),t("br"),t("span",{staticClass:"line-number"},[s._v("233")]),t("br"),t("span",{staticClass:"line-number"},[s._v("234")]),t("br"),t("span",{staticClass:"line-number"},[s._v("235")]),t("br"),t("span",{staticClass:"line-number"},[s._v("236")]),t("br"),t("span",{staticClass:"line-number"},[s._v("237")]),t("br"),t("span",{staticClass:"line-number"},[s._v("238")]),t("br"),t("span",{staticClass:"line-number"},[s._v("239")]),t("br"),t("span",{staticClass:"line-number"},[s._v("240")]),t("br"),t("span",{staticClass:"line-number"},[s._v("241")]),t("br"),t("span",{staticClass:"line-number"},[s._v("242")]),t("br"),t("span",{staticClass:"line-number"},[s._v("243")]),t("br"),t("span",{staticClass:"line-number"},[s._v("244")]),t("br"),t("span",{staticClass:"line-number"},[s._v("245")]),t("br"),t("span",{staticClass:"line-number"},[s._v("246")]),t("br"),t("span",{staticClass:"line-number"},[s._v("247")]),t("br"),t("span",{staticClass:"line-number"},[s._v("248")]),t("br"),t("span",{staticClass:"line-number"},[s._v("249")]),t("br"),t("span",{staticClass:"line-number"},[s._v("250")]),t("br"),t("span",{staticClass:"line-number"},[s._v("251")]),t("br"),t("span",{staticClass:"line-number"},[s._v("252")]),t("br"),t("span",{staticClass:"line-number"},[s._v("253")]),t("br"),t("span",{staticClass:"line-number"},[s._v("254")]),t("br"),t("span",{staticClass:"line-number"},[s._v("255")]),t("br"),t("span",{staticClass:"line-number"},[s._v("256")]),t("br"),t("span",{staticClass:"line-number"},[s._v("257")]),t("br"),t("span",{staticClass:"line-number"},[s._v("258")]),t("br"),t("span",{staticClass:"line-number"},[s._v("259")]),t("br"),t("span",{staticClass:"line-number"},[s._v("260")]),t("br"),t("span",{staticClass:"line-number"},[s._v("261")]),t("br"),t("span",{staticClass:"line-number"},[s._v("262")]),t("br"),t("span",{staticClass:"line-number"},[s._v("263")]),t("br"),t("span",{staticClass:"line-number"},[s._v("264")]),t("br"),t("span",{staticClass:"line-number"},[s._v("265")]),t("br"),t("span",{staticClass:"line-number"},[s._v("266")]),t("br"),t("span",{staticClass:"line-number"},[s._v("267")]),t("br"),t("span",{staticClass:"line-number"},[s._v("268")]),t("br"),t("span",{staticClass:"line-number"},[s._v("269")]),t("br"),t("span",{staticClass:"line-number"},[s._v("270")]),t("br"),t("span",{staticClass:"line-number"},[s._v("271")]),t("br"),t("span",{staticClass:"line-number"},[s._v("272")]),t("br"),t("span",{staticClass:"line-number"},[s._v("273")]),t("br"),t("span",{staticClass:"line-number"},[s._v("274")]),t("br"),t("span",{staticClass:"line-number"},[s._v("275")]),t("br"),t("span",{staticClass:"line-number"},[s._v("276")]),t("br"),t("span",{staticClass:"line-number"},[s._v("277")]),t("br"),t("span",{staticClass:"line-number"},[s._v("278")]),t("br"),t("span",{staticClass:"line-number"},[s._v("279")]),t("br"),t("span",{staticClass:"line-number"},[s._v("280")]),t("br"),t("span",{staticClass:"line-number"},[s._v("281")]),t("br"),t("span",{staticClass:"line-number"},[s._v("282")]),t("br"),t("span",{staticClass:"line-number"},[s._v("283")]),t("br"),t("span",{staticClass:"line-number"},[s._v("284")]),t("br"),t("span",{staticClass:"line-number"},[s._v("285")]),t("br"),t("span",{staticClass:"line-number"},[s._v("286")]),t("br"),t("span",{staticClass:"line-number"},[s._v("287")]),t("br"),t("span",{staticClass:"line-number"},[s._v("288")]),t("br"),t("span",{staticClass:"line-number"},[s._v("289")]),t("br"),t("span",{staticClass:"line-number"},[s._v("290")]),t("br"),t("span",{staticClass:"line-number"},[s._v("291")]),t("br"),t("span",{staticClass:"line-number"},[s._v("292")]),t("br"),t("span",{staticClass:"line-number"},[s._v("293")]),t("br"),t("span",{staticClass:"line-number"},[s._v("294")]),t("br"),t("span",{staticClass:"line-number"},[s._v("295")]),t("br"),t("span",{staticClass:"line-number"},[s._v("296")]),t("br"),t("span",{staticClass:"line-number"},[s._v("297")]),t("br"),t("span",{staticClass:"line-number"},[s._v("298")]),t("br"),t("span",{staticClass:"line-number"},[s._v("299")]),t("br"),t("span",{staticClass:"line-number"},[s._v("300")]),t("br"),t("span",{staticClass:"line-number"},[s._v("301")]),t("br"),t("span",{staticClass:"line-number"},[s._v("302")]),t("br"),t("span",{staticClass:"line-number"},[s._v("303")]),t("br"),t("span",{staticClass:"line-number"},[s._v("304")]),t("br"),t("span",{staticClass:"line-number"},[s._v("305")]),t("br"),t("span",{staticClass:"line-number"},[s._v("306")]),t("br"),t("span",{staticClass:"line-number"},[s._v("307")]),t("br"),t("span",{staticClass:"line-number"},[s._v("308")]),t("br"),t("span",{staticClass:"line-number"},[s._v("309")]),t("br"),t("span",{staticClass:"line-number"},[s._v("310")]),t("br"),t("span",{staticClass:"line-number"},[s._v("311")]),t("br"),t("span",{staticClass:"line-number"},[s._v("312")]),t("br"),t("span",{staticClass:"line-number"},[s._v("313")]),t("br"),t("span",{staticClass:"line-number"},[s._v("314")]),t("br"),t("span",{staticClass:"line-number"},[s._v("315")]),t("br"),t("span",{staticClass:"line-number"},[s._v("316")]),t("br"),t("span",{staticClass:"line-number"},[s._v("317")]),t("br"),t("span",{staticClass:"line-number"},[s._v("318")]),t("br"),t("span",{staticClass:"line-number"},[s._v("319")]),t("br"),t("span",{staticClass:"line-number"},[s._v("320")]),t("br"),t("span",{staticClass:"line-number"},[s._v("321")]),t("br"),t("span",{staticClass:"line-number"},[s._v("322")]),t("br"),t("span",{staticClass:"line-number"},[s._v("323")]),t("br"),t("span",{staticClass:"line-number"},[s._v("324")]),t("br"),t("span",{staticClass:"line-number"},[s._v("325")]),t("br"),t("span",{staticClass:"line-number"},[s._v("326")]),t("br"),t("span",{staticClass:"line-number"},[s._v("327")]),t("br"),t("span",{staticClass:"line-number"},[s._v("328")]),t("br"),t("span",{staticClass:"line-number"},[s._v("329")]),t("br"),t("span",{staticClass:"line-number"},[s._v("330")]),t("br"),t("span",{staticClass:"line-number"},[s._v("331")]),t("br"),t("span",{staticClass:"line-number"},[s._v("332")]),t("br"),t("span",{staticClass:"line-number"},[s._v("333")]),t("br"),t("span",{staticClass:"line-number"},[s._v("334")]),t("br"),t("span",{staticClass:"line-number"},[s._v("335")]),t("br"),t("span",{staticClass:"line-number"},[s._v("336")]),t("br"),t("span",{staticClass:"line-number"},[s._v("337")]),t("br"),t("span",{staticClass:"line-number"},[s._v("338")]),t("br"),t("span",{staticClass:"line-number"},[s._v("339")]),t("br"),t("span",{staticClass:"line-number"},[s._v("340")]),t("br"),t("span",{staticClass:"line-number"},[s._v("341")]),t("br"),t("span",{staticClass:"line-number"},[s._v("342")]),t("br"),t("span",{staticClass:"line-number"},[s._v("343")]),t("br"),t("span",{staticClass:"line-number"},[s._v("344")]),t("br"),t("span",{staticClass:"line-number"},[s._v("345")]),t("br"),t("span",{staticClass:"line-number"},[s._v("346")]),t("br"),t("span",{staticClass:"line-number"},[s._v("347")]),t("br"),t("span",{staticClass:"line-number"},[s._v("348")]),t("br"),t("span",{staticClass:"line-number"},[s._v("349")]),t("br"),t("span",{staticClass:"line-number"},[s._v("350")]),t("br"),t("span",{staticClass:"line-number"},[s._v("351")]),t("br"),t("span",{staticClass:"line-number"},[s._v("352")]),t("br"),t("span",{staticClass:"line-number"},[s._v("353")]),t("br"),t("span",{staticClass:"line-number"},[s._v("354")]),t("br"),t("span",{staticClass:"line-number"},[s._v("355")]),t("br"),t("span",{staticClass:"line-number"},[s._v("356")]),t("br"),t("span",{staticClass:"line-number"},[s._v("357")]),t("br"),t("span",{staticClass:"line-number"},[s._v("358")]),t("br"),t("span",{staticClass:"line-number"},[s._v("359")]),t("br"),t("span",{staticClass:"line-number"},[s._v("360")]),t("br"),t("span",{staticClass:"line-number"},[s._v("361")]),t("br"),t("span",{staticClass:"line-number"},[s._v("362")]),t("br"),t("span",{staticClass:"line-number"},[s._v("363")]),t("br"),t("span",{staticClass:"line-number"},[s._v("364")]),t("br"),t("span",{staticClass:"line-number"},[s._v("365")]),t("br"),t("span",{staticClass:"line-number"},[s._v("366")]),t("br"),t("span",{staticClass:"line-number"},[s._v("367")]),t("br"),t("span",{staticClass:"line-number"},[s._v("368")]),t("br"),t("span",{staticClass:"line-number"},[s._v("369")]),t("br"),t("span",{staticClass:"line-number"},[s._v("370")]),t("br"),t("span",{staticClass:"line-number"},[s._v("371")]),t("br"),t("span",{staticClass:"line-number"},[s._v("372")]),t("br"),t("span",{staticClass:"line-number"},[s._v("373")]),t("br"),t("span",{staticClass:"line-number"},[s._v("374")]),t("br"),t("span",{staticClass:"line-number"},[s._v("375")]),t("br"),t("span",{staticClass:"line-number"},[s._v("376")]),t("br"),t("span",{staticClass:"line-number"},[s._v("377")]),t("br"),t("span",{staticClass:"line-number"},[s._v("378")]),t("br"),t("span",{staticClass:"line-number"},[s._v("379")]),t("br"),t("span",{staticClass:"line-number"},[s._v("380")]),t("br"),t("span",{staticClass:"line-number"},[s._v("381")]),t("br"),t("span",{staticClass:"line-number"},[s._v("382")]),t("br"),t("span",{staticClass:"line-number"},[s._v("383")]),t("br"),t("span",{staticClass:"line-number"},[s._v("384")]),t("br"),t("span",{staticClass:"line-number"},[s._v("385")]),t("br"),t("span",{staticClass:"line-number"},[s._v("386")]),t("br"),t("span",{staticClass:"line-number"},[s._v("387")]),t("br"),t("span",{staticClass:"line-number"},[s._v("388")]),t("br"),t("span",{staticClass:"line-number"},[s._v("389")]),t("br"),t("span",{staticClass:"line-number"},[s._v("390")]),t("br"),t("span",{staticClass:"line-number"},[s._v("391")]),t("br"),t("span",{staticClass:"line-number"},[s._v("392")]),t("br"),t("span",{staticClass:"line-number"},[s._v("393")]),t("br"),t("span",{staticClass:"line-number"},[s._v("394")]),t("br"),t("span",{staticClass:"line-number"},[s._v("395")]),t("br"),t("span",{staticClass:"line-number"},[s._v("396")]),t("br"),t("span",{staticClass:"line-number"},[s._v("397")]),t("br"),t("span",{staticClass:"line-number"},[s._v("398")]),t("br"),t("span",{staticClass:"line-number"},[s._v("399")]),t("br"),t("span",{staticClass:"line-number"},[s._v("400")]),t("br"),t("span",{staticClass:"line-number"},[s._v("401")]),t("br"),t("span",{staticClass:"line-number"},[s._v("402")]),t("br"),t("span",{staticClass:"line-number"},[s._v("403")]),t("br"),t("span",{staticClass:"line-number"},[s._v("404")]),t("br"),t("span",{staticClass:"line-number"},[s._v("405")]),t("br"),t("span",{staticClass:"line-number"},[s._v("406")]),t("br"),t("span",{staticClass:"line-number"},[s._v("407")]),t("br"),t("span",{staticClass:"line-number"},[s._v("408")]),t("br"),t("span",{staticClass:"line-number"},[s._v("409")]),t("br"),t("span",{staticClass:"line-number"},[s._v("410")]),t("br"),t("span",{staticClass:"line-number"},[s._v("411")]),t("br"),t("span",{staticClass:"line-number"},[s._v("412")]),t("br"),t("span",{staticClass:"line-number"},[s._v("413")]),t("br"),t("span",{staticClass:"line-number"},[s._v("414")]),t("br"),t("span",{staticClass:"line-number"},[s._v("415")]),t("br"),t("span",{staticClass:"line-number"},[s._v("416")]),t("br"),t("span",{staticClass:"line-number"},[s._v("417")]),t("br"),t("span",{staticClass:"line-number"},[s._v("418")]),t("br"),t("span",{staticClass:"line-number"},[s._v("419")]),t("br"),t("span",{staticClass:"line-number"},[s._v("420")]),t("br"),t("span",{staticClass:"line-number"},[s._v("421")]),t("br"),t("span",{staticClass:"line-number"},[s._v("422")]),t("br"),t("span",{staticClass:"line-number"},[s._v("423")]),t("br"),t("span",{staticClass:"line-number"},[s._v("424")]),t("br"),t("span",{staticClass:"line-number"},[s._v("425")]),t("br"),t("span",{staticClass:"line-number"},[s._v("426")]),t("br"),t("span",{staticClass:"line-number"},[s._v("427")]),t("br"),t("span",{staticClass:"line-number"},[s._v("428")]),t("br"),t("span",{staticClass:"line-number"},[s._v("429")]),t("br"),t("span",{staticClass:"line-number"},[s._v("430")]),t("br"),t("span",{staticClass:"line-number"},[s._v("431")]),t("br"),t("span",{staticClass:"line-number"},[s._v("432")]),t("br"),t("span",{staticClass:"line-number"},[s._v("433")]),t("br"),t("span",{staticClass:"line-number"},[s._v("434")]),t("br"),t("span",{staticClass:"line-number"},[s._v("435")]),t("br"),t("span",{staticClass:"line-number"},[s._v("436")]),t("br"),t("span",{staticClass:"line-number"},[s._v("437")]),t("br"),t("span",{staticClass:"line-number"},[s._v("438")]),t("br"),t("span",{staticClass:"line-number"},[s._v("439")]),t("br"),t("span",{staticClass:"line-number"},[s._v("440")]),t("br"),t("span",{staticClass:"line-number"},[s._v("441")]),t("br"),t("span",{staticClass:"line-number"},[s._v("442")]),t("br"),t("span",{staticClass:"line-number"},[s._v("443")]),t("br"),t("span",{staticClass:"line-number"},[s._v("444")]),t("br"),t("span",{staticClass:"line-number"},[s._v("445")]),t("br"),t("span",{staticClass:"line-number"},[s._v("446")]),t("br"),t("span",{staticClass:"line-number"},[s._v("447")]),t("br"),t("span",{staticClass:"line-number"},[s._v("448")]),t("br"),t("span",{staticClass:"line-number"},[s._v("449")]),t("br"),t("span",{staticClass:"line-number"},[s._v("450")]),t("br"),t("span",{staticClass:"line-number"},[s._v("451")]),t("br"),t("span",{staticClass:"line-number"},[s._v("452")]),t("br"),t("span",{staticClass:"line-number"},[s._v("453")]),t("br"),t("span",{staticClass:"line-number"},[s._v("454")]),t("br"),t("span",{staticClass:"line-number"},[s._v("455")]),t("br"),t("span",{staticClass:"line-number"},[s._v("456")]),t("br"),t("span",{staticClass:"line-number"},[s._v("457")]),t("br"),t("span",{staticClass:"line-number"},[s._v("458")]),t("br"),t("span",{staticClass:"line-number"},[s._v("459")]),t("br"),t("span",{staticClass:"line-number"},[s._v("460")]),t("br"),t("span",{staticClass:"line-number"},[s._v("461")]),t("br"),t("span",{staticClass:"line-number"},[s._v("462")]),t("br"),t("span",{staticClass:"line-number"},[s._v("463")]),t("br"),t("span",{staticClass:"line-number"},[s._v("464")]),t("br"),t("span",{staticClass:"line-number"},[s._v("465")]),t("br"),t("span",{staticClass:"line-number"},[s._v("466")]),t("br"),t("span",{staticClass:"line-number"},[s._v("467")]),t("br"),t("span",{staticClass:"line-number"},[s._v("468")]),t("br"),t("span",{staticClass:"line-number"},[s._v("469")]),t("br"),t("span",{staticClass:"line-number"},[s._v("470")]),t("br"),t("span",{staticClass:"line-number"},[s._v("471")]),t("br"),t("span",{staticClass:"line-number"},[s._v("472")]),t("br"),t("span",{staticClass:"line-number"},[s._v("473")]),t("br"),t("span",{staticClass:"line-number"},[s._v("474")]),t("br"),t("span",{staticClass:"line-number"},[s._v("475")]),t("br"),t("span",{staticClass:"line-number"},[s._v("476")]),t("br"),t("span",{staticClass:"line-number"},[s._v("477")]),t("br"),t("span",{staticClass:"line-number"},[s._v("478")]),t("br"),t("span",{staticClass:"line-number"},[s._v("479")]),t("br"),t("span",{staticClass:"line-number"},[s._v("480")]),t("br"),t("span",{staticClass:"line-number"},[s._v("481")]),t("br"),t("span",{staticClass:"line-number"},[s._v("482")]),t("br"),t("span",{staticClass:"line-number"},[s._v("483")]),t("br"),t("span",{staticClass:"line-number"},[s._v("484")]),t("br"),t("span",{staticClass:"line-number"},[s._v("485")]),t("br"),t("span",{staticClass:"line-number"},[s._v("486")]),t("br"),t("span",{staticClass:"line-number"},[s._v("487")]),t("br"),t("span",{staticClass:"line-number"},[s._v("488")]),t("br"),t("span",{staticClass:"line-number"},[s._v("489")]),t("br"),t("span",{staticClass:"line-number"},[s._v("490")]),t("br"),t("span",{staticClass:"line-number"},[s._v("491")]),t("br"),t("span",{staticClass:"line-number"},[s._v("492")]),t("br"),t("span",{staticClass:"line-number"},[s._v("493")]),t("br"),t("span",{staticClass:"line-number"},[s._v("494")]),t("br"),t("span",{staticClass:"line-number"},[s._v("495")]),t("br"),t("span",{staticClass:"line-number"},[s._v("496")]),t("br"),t("span",{staticClass:"line-number"},[s._v("497")]),t("br"),t("span",{staticClass:"line-number"},[s._v("498")]),t("br"),t("span",{staticClass:"line-number"},[s._v("499")]),t("br"),t("span",{staticClass:"line-number"},[s._v("500")]),t("br"),t("span",{staticClass:"line-number"},[s._v("501")]),t("br"),t("span",{staticClass:"line-number"},[s._v("502")]),t("br"),t("span",{staticClass:"line-number"},[s._v("503")]),t("br"),t("span",{staticClass:"line-number"},[s._v("504")]),t("br"),t("span",{staticClass:"line-number"},[s._v("505")]),t("br"),t("span",{staticClass:"line-number"},[s._v("506")]),t("br"),t("span",{staticClass:"line-number"},[s._v("507")]),t("br"),t("span",{staticClass:"line-number"},[s._v("508")]),t("br"),t("span",{staticClass:"line-number"},[s._v("509")]),t("br"),t("span",{staticClass:"line-number"},[s._v("510")]),t("br"),t("span",{staticClass:"line-number"},[s._v("511")]),t("br"),t("span",{staticClass:"line-number"},[s._v("512")]),t("br"),t("span",{staticClass:"line-number"},[s._v("513")]),t("br"),t("span",{staticClass:"line-number"},[s._v("514")]),t("br"),t("span",{staticClass:"line-number"},[s._v("515")]),t("br"),t("span",{staticClass:"line-number"},[s._v("516")]),t("br"),t("span",{staticClass:"line-number"},[s._v("517")]),t("br"),t("span",{staticClass:"line-number"},[s._v("518")]),t("br"),t("span",{staticClass:"line-number"},[s._v("519")]),t("br"),t("span",{staticClass:"line-number"},[s._v("520")]),t("br"),t("span",{staticClass:"line-number"},[s._v("521")]),t("br"),t("span",{staticClass:"line-number"},[s._v("522")]),t("br"),t("span",{staticClass:"line-number"},[s._v("523")]),t("br"),t("span",{staticClass:"line-number"},[s._v("524")]),t("br"),t("span",{staticClass:"line-number"},[s._v("525")]),t("br"),t("span",{staticClass:"line-number"},[s._v("526")]),t("br"),t("span",{staticClass:"line-number"},[s._v("527")]),t("br"),t("span",{staticClass:"line-number"},[s._v("528")]),t("br"),t("span",{staticClass:"line-number"},[s._v("529")]),t("br"),t("span",{staticClass:"line-number"},[s._v("530")]),t("br"),t("span",{staticClass:"line-number"},[s._v("531")]),t("br"),t("span",{staticClass:"line-number"},[s._v("532")]),t("br"),t("span",{staticClass:"line-number"},[s._v("533")]),t("br"),t("span",{staticClass:"line-number"},[s._v("534")]),t("br"),t("span",{staticClass:"line-number"},[s._v("535")]),t("br"),t("span",{staticClass:"line-number"},[s._v("536")]),t("br"),t("span",{staticClass:"line-number"},[s._v("537")]),t("br"),t("span",{staticClass:"line-number"},[s._v("538")]),t("br"),t("span",{staticClass:"line-number"},[s._v("539")]),t("br"),t("span",{staticClass:"line-number"},[s._v("540")]),t("br"),t("span",{staticClass:"line-number"},[s._v("541")]),t("br"),t("span",{staticClass:"line-number"},[s._v("542")]),t("br"),t("span",{staticClass:"line-number"},[s._v("543")]),t("br"),t("span",{staticClass:"line-number"},[s._v("544")]),t("br"),t("span",{staticClass:"line-number"},[s._v("545")]),t("br"),t("span",{staticClass:"line-number"},[s._v("546")]),t("br"),t("span",{staticClass:"line-number"},[s._v("547")]),t("br"),t("span",{staticClass:"line-number"},[s._v("548")]),t("br"),t("span",{staticClass:"line-number"},[s._v("549")]),t("br"),t("span",{staticClass:"line-number"},[s._v("550")]),t("br"),t("span",{staticClass:"line-number"},[s._v("551")]),t("br"),t("span",{staticClass:"line-number"},[s._v("552")]),t("br"),t("span",{staticClass:"line-number"},[s._v("553")]),t("br"),t("span",{staticClass:"line-number"},[s._v("554")]),t("br"),t("span",{staticClass:"line-number"},[s._v("555")]),t("br"),t("span",{staticClass:"line-number"},[s._v("556")]),t("br"),t("span",{staticClass:"line-number"},[s._v("557")]),t("br"),t("span",{staticClass:"line-number"},[s._v("558")]),t("br"),t("span",{staticClass:"line-number"},[s._v("559")]),t("br"),t("span",{staticClass:"line-number"},[s._v("560")]),t("br"),t("span",{staticClass:"line-number"},[s._v("561")]),t("br"),t("span",{staticClass:"line-number"},[s._v("562")]),t("br"),t("span",{staticClass:"line-number"},[s._v("563")]),t("br"),t("span",{staticClass:"line-number"},[s._v("564")]),t("br"),t("span",{staticClass:"line-number"},[s._v("565")]),t("br"),t("span",{staticClass:"line-number"},[s._v("566")]),t("br"),t("span",{staticClass:"line-number"},[s._v("567")]),t("br"),t("span",{staticClass:"line-number"},[s._v("568")]),t("br"),t("span",{staticClass:"line-number"},[s._v("569")]),t("br"),t("span",{staticClass:"line-number"},[s._v("570")]),t("br"),t("span",{staticClass:"line-number"},[s._v("571")]),t("br"),t("span",{staticClass:"line-number"},[s._v("572")]),t("br"),t("span",{staticClass:"line-number"},[s._v("573")]),t("br"),t("span",{staticClass:"line-number"},[s._v("574")]),t("br"),t("span",{staticClass:"line-number"},[s._v("575")]),t("br"),t("span",{staticClass:"line-number"},[s._v("576")]),t("br"),t("span",{staticClass:"line-number"},[s._v("577")]),t("br"),t("span",{staticClass:"line-number"},[s._v("578")]),t("br"),t("span",{staticClass:"line-number"},[s._v("579")]),t("br"),t("span",{staticClass:"line-number"},[s._v("580")]),t("br"),t("span",{staticClass:"line-number"},[s._v("581")]),t("br"),t("span",{staticClass:"line-number"},[s._v("582")]),t("br"),t("span",{staticClass:"line-number"},[s._v("583")]),t("br"),t("span",{staticClass:"line-number"},[s._v("584")]),t("br"),t("span",{staticClass:"line-number"},[s._v("585")]),t("br"),t("span",{staticClass:"line-number"},[s._v("586")]),t("br"),t("span",{staticClass:"line-number"},[s._v("587")]),t("br"),t("span",{staticClass:"line-number"},[s._v("588")]),t("br"),t("span",{staticClass:"line-number"},[s._v("589")]),t("br"),t("span",{staticClass:"line-number"},[s._v("590")]),t("br"),t("span",{staticClass:"line-number"},[s._v("591")]),t("br"),t("span",{staticClass:"line-number"},[s._v("592")]),t("br"),t("span",{staticClass:"line-number"},[s._v("593")]),t("br"),t("span",{staticClass:"line-number"},[s._v("594")]),t("br"),t("span",{staticClass:"line-number"},[s._v("595")]),t("br"),t("span",{staticClass:"line-number"},[s._v("596")]),t("br"),t("span",{staticClass:"line-number"},[s._v("597")]),t("br"),t("span",{staticClass:"line-number"},[s._v("598")]),t("br"),t("span",{staticClass:"line-number"},[s._v("599")]),t("br"),t("span",{staticClass:"line-number"},[s._v("600")]),t("br"),t("span",{staticClass:"line-number"},[s._v("601")]),t("br"),t("span",{staticClass:"line-number"},[s._v("602")]),t("br"),t("span",{staticClass:"line-number"},[s._v("603")]),t("br"),t("span",{staticClass:"line-number"},[s._v("604")]),t("br"),t("span",{staticClass:"line-number"},[s._v("605")]),t("br"),t("span",{staticClass:"line-number"},[s._v("606")]),t("br"),t("span",{staticClass:"line-number"},[s._v("607")]),t("br"),t("span",{staticClass:"line-number"},[s._v("608")]),t("br"),t("span",{staticClass:"line-number"},[s._v("609")]),t("br"),t("span",{staticClass:"line-number"},[s._v("610")]),t("br"),t("span",{staticClass:"line-number"},[s._v("611")]),t("br"),t("span",{staticClass:"line-number"},[s._v("612")]),t("br"),t("span",{staticClass:"line-number"},[s._v("613")]),t("br"),t("span",{staticClass:"line-number"},[s._v("614")]),t("br"),t("span",{staticClass:"line-number"},[s._v("615")]),t("br"),t("span",{staticClass:"line-number"},[s._v("616")]),t("br"),t("span",{staticClass:"line-number"},[s._v("617")]),t("br"),t("span",{staticClass:"line-number"},[s._v("618")]),t("br"),t("span",{staticClass:"line-number"},[s._v("619")]),t("br"),t("span",{staticClass:"line-number"},[s._v("620")]),t("br"),t("span",{staticClass:"line-number"},[s._v("621")]),t("br"),t("span",{staticClass:"line-number"},[s._v("622")]),t("br"),t("span",{staticClass:"line-number"},[s._v("623")]),t("br"),t("span",{staticClass:"line-number"},[s._v("624")]),t("br"),t("span",{staticClass:"line-number"},[s._v("625")]),t("br"),t("span",{staticClass:"line-number"},[s._v("626")]),t("br"),t("span",{staticClass:"line-number"},[s._v("627")]),t("br"),t("span",{staticClass:"line-number"},[s._v("628")]),t("br"),t("span",{staticClass:"line-number"},[s._v("629")]),t("br"),t("span",{staticClass:"line-number"},[s._v("630")]),t("br"),t("span",{staticClass:"line-number"},[s._v("631")]),t("br"),t("span",{staticClass:"line-number"},[s._v("632")]),t("br"),t("span",{staticClass:"line-number"},[s._v("633")]),t("br"),t("span",{staticClass:"line-number"},[s._v("634")]),t("br"),t("span",{staticClass:"line-number"},[s._v("635")]),t("br"),t("span",{staticClass:"line-number"},[s._v("636")]),t("br"),t("span",{staticClass:"line-number"},[s._v("637")]),t("br"),t("span",{staticClass:"line-number"},[s._v("638")]),t("br"),t("span",{staticClass:"line-number"},[s._v("639")]),t("br"),t("span",{staticClass:"line-number"},[s._v("640")]),t("br"),t("span",{staticClass:"line-number"},[s._v("641")]),t("br"),t("span",{staticClass:"line-number"},[s._v("642")]),t("br"),t("span",{staticClass:"line-number"},[s._v("643")]),t("br"),t("span",{staticClass:"line-number"},[s._v("644")]),t("br"),t("span",{staticClass:"line-number"},[s._v("645")]),t("br"),t("span",{staticClass:"line-number"},[s._v("646")]),t("br"),t("span",{staticClass:"line-number"},[s._v("647")]),t("br"),t("span",{staticClass:"line-number"},[s._v("648")]),t("br"),t("span",{staticClass:"line-number"},[s._v("649")]),t("br"),t("span",{staticClass:"line-number"},[s._v("650")]),t("br"),t("span",{staticClass:"line-number"},[s._v("651")]),t("br"),t("span",{staticClass:"line-number"},[s._v("652")]),t("br"),t("span",{staticClass:"line-number"},[s._v("653")]),t("br"),t("span",{staticClass:"line-number"},[s._v("654")]),t("br"),t("span",{staticClass:"line-number"},[s._v("655")]),t("br"),t("span",{staticClass:"line-number"},[s._v("656")]),t("br"),t("span",{staticClass:"line-number"},[s._v("657")]),t("br"),t("span",{staticClass:"line-number"},[s._v("658")]),t("br"),t("span",{staticClass:"line-number"},[s._v("659")]),t("br"),t("span",{staticClass:"line-number"},[s._v("660")]),t("br"),t("span",{staticClass:"line-number"},[s._v("661")]),t("br"),t("span",{staticClass:"line-number"},[s._v("662")]),t("br"),t("span",{staticClass:"line-number"},[s._v("663")]),t("br"),t("span",{staticClass:"line-number"},[s._v("664")]),t("br"),t("span",{staticClass:"line-number"},[s._v("665")]),t("br"),t("span",{staticClass:"line-number"},[s._v("666")]),t("br"),t("span",{staticClass:"line-number"},[s._v("667")]),t("br"),t("span",{staticClass:"line-number"},[s._v("668")]),t("br"),t("span",{staticClass:"line-number"},[s._v("669")]),t("br"),t("span",{staticClass:"line-number"},[s._v("670")]),t("br"),t("span",{staticClass:"line-number"},[s._v("671")]),t("br"),t("span",{staticClass:"line-number"},[s._v("672")]),t("br"),t("span",{staticClass:"line-number"},[s._v("673")]),t("br"),t("span",{staticClass:"line-number"},[s._v("674")]),t("br"),t("span",{staticClass:"line-number"},[s._v("675")]),t("br"),t("span",{staticClass:"line-number"},[s._v("676")]),t("br"),t("span",{staticClass:"line-number"},[s._v("677")]),t("br"),t("span",{staticClass:"line-number"},[s._v("678")]),t("br"),t("span",{staticClass:"line-number"},[s._v("679")]),t("br"),t("span",{staticClass:"line-number"},[s._v("680")]),t("br"),t("span",{staticClass:"line-number"},[s._v("681")]),t("br"),t("span",{staticClass:"line-number"},[s._v("682")]),t("br"),t("span",{staticClass:"line-number"},[s._v("683")]),t("br"),t("span",{staticClass:"line-number"},[s._v("684")]),t("br"),t("span",{staticClass:"line-number"},[s._v("685")]),t("br"),t("span",{staticClass:"line-number"},[s._v("686")]),t("br"),t("span",{staticClass:"line-number"},[s._v("687")]),t("br"),t("span",{staticClass:"line-number"},[s._v("688")]),t("br"),t("span",{staticClass:"line-number"},[s._v("689")]),t("br"),t("span",{staticClass:"line-number"},[s._v("690")]),t("br"),t("span",{staticClass:"line-number"},[s._v("691")]),t("br"),t("span",{staticClass:"line-number"},[s._v("692")]),t("br"),t("span",{staticClass:"line-number"},[s._v("693")]),t("br"),t("span",{staticClass:"line-number"},[s._v("694")]),t("br"),t("span",{staticClass:"line-number"},[s._v("695")]),t("br"),t("span",{staticClass:"line-number"},[s._v("696")]),t("br"),t("span",{staticClass:"line-number"},[s._v("697")]),t("br"),t("span",{staticClass:"line-number"},[s._v("698")]),t("br"),t("span",{staticClass:"line-number"},[s._v("699")]),t("br"),t("span",{staticClass:"line-number"},[s._v("700")]),t("br"),t("span",{staticClass:"line-number"},[s._v("701")]),t("br"),t("span",{staticClass:"line-number"},[s._v("702")]),t("br"),t("span",{staticClass:"line-number"},[s._v("703")]),t("br"),t("span",{staticClass:"line-number"},[s._v("704")]),t("br"),t("span",{staticClass:"line-number"},[s._v("705")]),t("br"),t("span",{staticClass:"line-number"},[s._v("706")]),t("br"),t("span",{staticClass:"line-number"},[s._v("707")]),t("br"),t("span",{staticClass:"line-number"},[s._v("708")]),t("br"),t("span",{staticClass:"line-number"},[s._v("709")]),t("br"),t("span",{staticClass:"line-number"},[s._v("710")]),t("br"),t("span",{staticClass:"line-number"},[s._v("711")]),t("br"),t("span",{staticClass:"line-number"},[s._v("712")]),t("br"),t("span",{staticClass:"line-number"},[s._v("713")]),t("br"),t("span",{staticClass:"line-number"},[s._v("714")]),t("br"),t("span",{staticClass:"line-number"},[s._v("715")]),t("br"),t("span",{staticClass:"line-number"},[s._v("716")]),t("br"),t("span",{staticClass:"line-number"},[s._v("717")]),t("br"),t("span",{staticClass:"line-number"},[s._v("718")]),t("br"),t("span",{staticClass:"line-number"},[s._v("719")]),t("br"),t("span",{staticClass:"line-number"},[s._v("720")]),t("br"),t("span",{staticClass:"line-number"},[s._v("721")]),t("br"),t("span",{staticClass:"line-number"},[s._v("722")]),t("br"),t("span",{staticClass:"line-number"},[s._v("723")]),t("br"),t("span",{staticClass:"line-number"},[s._v("724")]),t("br"),t("span",{staticClass:"line-number"},[s._v("725")]),t("br"),t("span",{staticClass:"line-number"},[s._v("726")]),t("br"),t("span",{staticClass:"line-number"},[s._v("727")]),t("br"),t("span",{staticClass:"line-number"},[s._v("728")]),t("br"),t("span",{staticClass:"line-number"},[s._v("729")]),t("br"),t("span",{staticClass:"line-number"},[s._v("730")]),t("br"),t("span",{staticClass:"line-number"},[s._v("731")]),t("br"),t("span",{staticClass:"line-number"},[s._v("732")]),t("br"),t("span",{staticClass:"line-number"},[s._v("733")]),t("br"),t("span",{staticClass:"line-number"},[s._v("734")]),t("br"),t("span",{staticClass:"line-number"},[s._v("735")]),t("br"),t("span",{staticClass:"line-number"},[s._v("736")]),t("br"),t("span",{staticClass:"line-number"},[s._v("737")]),t("br"),t("span",{staticClass:"line-number"},[s._v("738")]),t("br"),t("span",{staticClass:"line-number"},[s._v("739")]),t("br"),t("span",{staticClass:"line-number"},[s._v("740")]),t("br"),t("span",{staticClass:"line-number"},[s._v("741")]),t("br"),t("span",{staticClass:"line-number"},[s._v("742")]),t("br"),t("span",{staticClass:"line-number"},[s._v("743")]),t("br"),t("span",{staticClass:"line-number"},[s._v("744")]),t("br"),t("span",{staticClass:"line-number"},[s._v("745")]),t("br"),t("span",{staticClass:"line-number"},[s._v("746")]),t("br"),t("span",{staticClass:"line-number"},[s._v("747")]),t("br"),t("span",{staticClass:"line-number"},[s._v("748")]),t("br"),t("span",{staticClass:"line-number"},[s._v("749")]),t("br"),t("span",{staticClass:"line-number"},[s._v("750")]),t("br"),t("span",{staticClass:"line-number"},[s._v("751")]),t("br"),t("span",{staticClass:"line-number"},[s._v("752")]),t("br"),t("span",{staticClass:"line-number"},[s._v("753")]),t("br"),t("span",{staticClass:"line-number"},[s._v("754")]),t("br"),t("span",{staticClass:"line-number"},[s._v("755")]),t("br"),t("span",{staticClass:"line-number"},[s._v("756")]),t("br"),t("span",{staticClass:"line-number"},[s._v("757")]),t("br"),t("span",{staticClass:"line-number"},[s._v("758")]),t("br"),t("span",{staticClass:"line-number"},[s._v("759")]),t("br"),t("span",{staticClass:"line-number"},[s._v("760")]),t("br"),t("span",{staticClass:"line-number"},[s._v("761")]),t("br"),t("span",{staticClass:"line-number"},[s._v("762")]),t("br"),t("span",{staticClass:"line-number"},[s._v("763")]),t("br"),t("span",{staticClass:"line-number"},[s._v("764")]),t("br"),t("span",{staticClass:"line-number"},[s._v("765")]),t("br"),t("span",{staticClass:"line-number"},[s._v("766")]),t("br"),t("span",{staticClass:"line-number"},[s._v("767")]),t("br"),t("span",{staticClass:"line-number"},[s._v("768")]),t("br"),t("span",{staticClass:"line-number"},[s._v("769")]),t("br"),t("span",{staticClass:"line-number"},[s._v("770")]),t("br"),t("span",{staticClass:"line-number"},[s._v("771")]),t("br"),t("span",{staticClass:"line-number"},[s._v("772")]),t("br"),t("span",{staticClass:"line-number"},[s._v("773")]),t("br"),t("span",{staticClass:"line-number"},[s._v("774")]),t("br"),t("span",{staticClass:"line-number"},[s._v("775")]),t("br"),t("span",{staticClass:"line-number"},[s._v("776")]),t("br"),t("span",{staticClass:"line-number"},[s._v("777")]),t("br"),t("span",{staticClass:"line-number"},[s._v("778")]),t("br"),t("span",{staticClass:"line-number"},[s._v("779")]),t("br"),t("span",{staticClass:"line-number"},[s._v("780")]),t("br"),t("span",{staticClass:"line-number"},[s._v("781")]),t("br"),t("span",{staticClass:"line-number"},[s._v("782")]),t("br"),t("span",{staticClass:"line-number"},[s._v("783")]),t("br"),t("span",{staticClass:"line-number"},[s._v("784")]),t("br"),t("span",{staticClass:"line-number"},[s._v("785")]),t("br"),t("span",{staticClass:"line-number"},[s._v("786")]),t("br"),t("span",{staticClass:"line-number"},[s._v("787")]),t("br"),t("span",{staticClass:"line-number"},[s._v("788")]),t("br"),t("span",{staticClass:"line-number"},[s._v("789")]),t("br"),t("span",{staticClass:"line-number"},[s._v("790")]),t("br"),t("span",{staticClass:"line-number"},[s._v("791")]),t("br"),t("span",{staticClass:"line-number"},[s._v("792")]),t("br"),t("span",{staticClass:"line-number"},[s._v("793")]),t("br"),t("span",{staticClass:"line-number"},[s._v("794")]),t("br"),t("span",{staticClass:"line-number"},[s._v("795")]),t("br"),t("span",{staticClass:"line-number"},[s._v("796")]),t("br"),t("span",{staticClass:"line-number"},[s._v("797")]),t("br"),t("span",{staticClass:"line-number"},[s._v("798")]),t("br"),t("span",{staticClass:"line-number"},[s._v("799")]),t("br"),t("span",{staticClass:"line-number"},[s._v("800")]),t("br"),t("span",{staticClass:"line-number"},[s._v("801")]),t("br"),t("span",{staticClass:"line-number"},[s._v("802")]),t("br"),t("span",{staticClass:"line-number"},[s._v("803")]),t("br"),t("span",{staticClass:"line-number"},[s._v("804")]),t("br"),t("span",{staticClass:"line-number"},[s._v("805")]),t("br"),t("span",{staticClass:"line-number"},[s._v("806")]),t("br"),t("span",{staticClass:"line-number"},[s._v("807")]),t("br"),t("span",{staticClass:"line-number"},[s._v("808")]),t("br"),t("span",{staticClass:"line-number"},[s._v("809")]),t("br"),t("span",{staticClass:"line-number"},[s._v("810")]),t("br"),t("span",{staticClass:"line-number"},[s._v("811")]),t("br"),t("span",{staticClass:"line-number"},[s._v("812")]),t("br"),t("span",{staticClass:"line-number"},[s._v("813")]),t("br"),t("span",{staticClass:"line-number"},[s._v("814")]),t("br"),t("span",{staticClass:"line-number"},[s._v("815")]),t("br"),t("span",{staticClass:"line-number"},[s._v("816")]),t("br"),t("span",{staticClass:"line-number"},[s._v("817")]),t("br"),t("span",{staticClass:"line-number"},[s._v("818")]),t("br"),t("span",{staticClass:"line-number"},[s._v("819")]),t("br"),t("span",{staticClass:"line-number"},[s._v("820")]),t("br"),t("span",{staticClass:"line-number"},[s._v("821")]),t("br"),t("span",{staticClass:"line-number"},[s._v("822")]),t("br"),t("span",{staticClass:"line-number"},[s._v("823")]),t("br"),t("span",{staticClass:"line-number"},[s._v("824")]),t("br"),t("span",{staticClass:"line-number"},[s._v("825")]),t("br"),t("span",{staticClass:"line-number"},[s._v("826")]),t("br"),t("span",{staticClass:"line-number"},[s._v("827")]),t("br"),t("span",{staticClass:"line-number"},[s._v("828")]),t("br"),t("span",{staticClass:"line-number"},[s._v("829")]),t("br"),t("span",{staticClass:"line-number"},[s._v("830")]),t("br"),t("span",{staticClass:"line-number"},[s._v("831")]),t("br"),t("span",{staticClass:"line-number"},[s._v("832")]),t("br"),t("span",{staticClass:"line-number"},[s._v("833")]),t("br"),t("span",{staticClass:"line-number"},[s._v("834")]),t("br"),t("span",{staticClass:"line-number"},[s._v("835")]),t("br"),t("span",{staticClass:"line-number"},[s._v("836")]),t("br"),t("span",{staticClass:"line-number"},[s._v("837")]),t("br"),t("span",{staticClass:"line-number"},[s._v("838")]),t("br"),t("span",{staticClass:"line-number"},[s._v("839")]),t("br"),t("span",{staticClass:"line-number"},[s._v("840")]),t("br"),t("span",{staticClass:"line-number"},[s._v("841")]),t("br"),t("span",{staticClass:"line-number"},[s._v("842")]),t("br"),t("span",{staticClass:"line-number"},[s._v("843")]),t("br"),t("span",{staticClass:"line-number"},[s._v("844")]),t("br"),t("span",{staticClass:"line-number"},[s._v("845")]),t("br"),t("span",{staticClass:"line-number"},[s._v("846")]),t("br"),t("span",{staticClass:"line-number"},[s._v("847")]),t("br"),t("span",{staticClass:"line-number"},[s._v("848")]),t("br"),t("span",{staticClass:"line-number"},[s._v("849")]),t("br"),t("span",{staticClass:"line-number"},[s._v("850")]),t("br"),t("span",{staticClass:"line-number"},[s._v("851")]),t("br"),t("span",{staticClass:"line-number"},[s._v("852")]),t("br"),t("span",{staticClass:"line-number"},[s._v("853")]),t("br"),t("span",{staticClass:"line-number"},[s._v("854")]),t("br"),t("span",{staticClass:"line-number"},[s._v("855")]),t("br"),t("span",{staticClass:"line-number"},[s._v("856")]),t("br"),t("span",{staticClass:"line-number"},[s._v("857")]),t("br"),t("span",{staticClass:"line-number"},[s._v("858")]),t("br"),t("span",{staticClass:"line-number"},[s._v("859")]),t("br"),t("span",{staticClass:"line-number"},[s._v("860")]),t("br"),t("span",{staticClass:"line-number"},[s._v("861")]),t("br"),t("span",{staticClass:"line-number"},[s._v("862")]),t("br"),t("span",{staticClass:"line-number"},[s._v("863")]),t("br"),t("span",{staticClass:"line-number"},[s._v("864")]),t("br"),t("span",{staticClass:"line-number"},[s._v("865")]),t("br"),t("span",{staticClass:"line-number"},[s._v("866")]),t("br"),t("span",{staticClass:"line-number"},[s._v("867")]),t("br"),t("span",{staticClass:"line-number"},[s._v("868")]),t("br"),t("span",{staticClass:"line-number"},[s._v("869")]),t("br"),t("span",{staticClass:"line-number"},[s._v("870")]),t("br"),t("span",{staticClass:"line-number"},[s._v("871")]),t("br"),t("span",{staticClass:"line-number"},[s._v("872")]),t("br"),t("span",{staticClass:"line-number"},[s._v("873")]),t("br"),t("span",{staticClass:"line-number"},[s._v("874")]),t("br"),t("span",{staticClass:"line-number"},[s._v("875")]),t("br"),t("span",{staticClass:"line-number"},[s._v("876")]),t("br"),t("span",{staticClass:"line-number"},[s._v("877")]),t("br"),t("span",{staticClass:"line-number"},[s._v("878")]),t("br"),t("span",{staticClass:"line-number"},[s._v("879")]),t("br"),t("span",{staticClass:"line-number"},[s._v("880")]),t("br"),t("span",{staticClass:"line-number"},[s._v("881")]),t("br"),t("span",{staticClass:"line-number"},[s._v("882")]),t("br"),t("span",{staticClass:"line-number"},[s._v("883")]),t("br"),t("span",{staticClass:"line-number"},[s._v("884")]),t("br"),t("span",{staticClass:"line-number"},[s._v("885")]),t("br"),t("span",{staticClass:"line-number"},[s._v("886")]),t("br"),t("span",{staticClass:"line-number"},[s._v("887")]),t("br"),t("span",{staticClass:"line-number"},[s._v("888")]),t("br"),t("span",{staticClass:"line-number"},[s._v("889")]),t("br"),t("span",{staticClass:"line-number"},[s._v("890")]),t("br"),t("span",{staticClass:"line-number"},[s._v("891")]),t("br"),t("span",{staticClass:"line-number"},[s._v("892")]),t("br"),t("span",{staticClass:"line-number"},[s._v("893")]),t("br"),t("span",{staticClass:"line-number"},[s._v("894")]),t("br"),t("span",{staticClass:"line-number"},[s._v("895")]),t("br"),t("span",{staticClass:"line-number"},[s._v("896")]),t("br"),t("span",{staticClass:"line-number"},[s._v("897")]),t("br"),t("span",{staticClass:"line-number"},[s._v("898")]),t("br"),t("span",{staticClass:"line-number"},[s._v("899")]),t("br"),t("span",{staticClass:"line-number"},[s._v("900")]),t("br"),t("span",{staticClass:"line-number"},[s._v("901")]),t("br"),t("span",{staticClass:"line-number"},[s._v("902")]),t("br"),t("span",{staticClass:"line-number"},[s._v("903")]),t("br"),t("span",{staticClass:"line-number"},[s._v("904")]),t("br"),t("span",{staticClass:"line-number"},[s._v("905")]),t("br"),t("span",{staticClass:"line-number"},[s._v("906")]),t("br"),t("span",{staticClass:"line-number"},[s._v("907")]),t("br"),t("span",{staticClass:"line-number"},[s._v("908")]),t("br"),t("span",{staticClass:"line-number"},[s._v("909")]),t("br"),t("span",{staticClass:"line-number"},[s._v("910")]),t("br"),t("span",{staticClass:"line-number"},[s._v("911")]),t("br"),t("span",{staticClass:"line-number"},[s._v("912")]),t("br"),t("span",{staticClass:"line-number"},[s._v("913")]),t("br"),t("span",{staticClass:"line-number"},[s._v("914")]),t("br"),t("span",{staticClass:"line-number"},[s._v("915")]),t("br"),t("span",{staticClass:"line-number"},[s._v("916")]),t("br"),t("span",{staticClass:"line-number"},[s._v("917")]),t("br"),t("span",{staticClass:"line-number"},[s._v("918")]),t("br"),t("span",{staticClass:"line-number"},[s._v("919")]),t("br"),t("span",{staticClass:"line-number"},[s._v("920")]),t("br"),t("span",{staticClass:"line-number"},[s._v("921")]),t("br"),t("span",{staticClass:"line-number"},[s._v("922")]),t("br"),t("span",{staticClass:"line-number"},[s._v("923")]),t("br"),t("span",{staticClass:"line-number"},[s._v("924")]),t("br"),t("span",{staticClass:"line-number"},[s._v("925")]),t("br"),t("span",{staticClass:"line-number"},[s._v("926")]),t("br"),t("span",{staticClass:"line-number"},[s._v("927")]),t("br"),t("span",{staticClass:"line-number"},[s._v("928")]),t("br"),t("span",{staticClass:"line-number"},[s._v("929")]),t("br"),t("span",{staticClass:"line-number"},[s._v("930")]),t("br"),t("span",{staticClass:"line-number"},[s._v("931")]),t("br"),t("span",{staticClass:"line-number"},[s._v("932")]),t("br"),t("span",{staticClass:"line-number"},[s._v("933")]),t("br"),t("span",{staticClass:"line-number"},[s._v("934")]),t("br"),t("span",{staticClass:"line-number"},[s._v("935")]),t("br"),t("span",{staticClass:"line-number"},[s._v("936")]),t("br"),t("span",{staticClass:"line-number"},[s._v("937")]),t("br"),t("span",{staticClass:"line-number"},[s._v("938")]),t("br"),t("span",{staticClass:"line-number"},[s._v("939")]),t("br"),t("span",{staticClass:"line-number"},[s._v("940")]),t("br"),t("span",{staticClass:"line-number"},[s._v("941")]),t("br"),t("span",{staticClass:"line-number"},[s._v("942")]),t("br"),t("span",{staticClass:"line-number"},[s._v("943")]),t("br"),t("span",{staticClass:"line-number"},[s._v("944")]),t("br"),t("span",{staticClass:"line-number"},[s._v("945")]),t("br"),t("span",{staticClass:"line-number"},[s._v("946")]),t("br"),t("span",{staticClass:"line-number"},[s._v("947")]),t("br"),t("span",{staticClass:"line-number"},[s._v("948")]),t("br"),t("span",{staticClass:"line-number"},[s._v("949")]),t("br"),t("span",{staticClass:"line-number"},[s._v("950")]),t("br"),t("span",{staticClass:"line-number"},[s._v("951")]),t("br"),t("span",{staticClass:"line-number"},[s._v("952")]),t("br"),t("span",{staticClass:"line-number"},[s._v("953")]),t("br"),t("span",{staticClass:"line-number"},[s._v("954")]),t("br"),t("span",{staticClass:"line-number"},[s._v("955")]),t("br"),t("span",{staticClass:"line-number"},[s._v("956")]),t("br"),t("span",{staticClass:"line-number"},[s._v("957")]),t("br"),t("span",{staticClass:"line-number"},[s._v("958")]),t("br"),t("span",{staticClass:"line-number"},[s._v("959")]),t("br"),t("span",{staticClass:"line-number"},[s._v("960")]),t("br"),t("span",{staticClass:"line-number"},[s._v("961")]),t("br"),t("span",{staticClass:"line-number"},[s._v("962")]),t("br"),t("span",{staticClass:"line-number"},[s._v("963")]),t("br"),t("span",{staticClass:"line-number"},[s._v("964")]),t("br"),t("span",{staticClass:"line-number"},[s._v("965")]),t("br"),t("span",{staticClass:"line-number"},[s._v("966")]),t("br"),t("span",{staticClass:"line-number"},[s._v("967")]),t("br"),t("span",{staticClass:"line-number"},[s._v("968")]),t("br"),t("span",{staticClass:"line-number"},[s._v("969")]),t("br"),t("span",{staticClass:"line-number"},[s._v("970")]),t("br"),t("span",{staticClass:"line-number"},[s._v("971")]),t("br"),t("span",{staticClass:"line-number"},[s._v("972")]),t("br"),t("span",{staticClass:"line-number"},[s._v("973")]),t("br"),t("span",{staticClass:"line-number"},[s._v("974")]),t("br"),t("span",{staticClass:"line-number"},[s._v("975")]),t("br"),t("span",{staticClass:"line-number"},[s._v("976")]),t("br"),t("span",{staticClass:"line-number"},[s._v("977")]),t("br"),t("span",{staticClass:"line-number"},[s._v("978")]),t("br"),t("span",{staticClass:"line-number"},[s._v("979")]),t("br"),t("span",{staticClass:"line-number"},[s._v("980")]),t("br"),t("span",{staticClass:"line-number"},[s._v("981")]),t("br"),t("span",{staticClass:"line-number"},[s._v("982")]),t("br"),t("span",{staticClass:"line-number"},[s._v("983")]),t("br"),t("span",{staticClass:"line-number"},[s._v("984")]),t("br"),t("span",{staticClass:"line-number"},[s._v("985")]),t("br"),t("span",{staticClass:"line-number"},[s._v("986")]),t("br"),t("span",{staticClass:"line-number"},[s._v("987")]),t("br"),t("span",{staticClass:"line-number"},[s._v("988")]),t("br"),t("span",{staticClass:"line-number"},[s._v("989")]),t("br"),t("span",{staticClass:"line-number"},[s._v("990")]),t("br"),t("span",{staticClass:"line-number"},[s._v("991")]),t("br"),t("span",{staticClass:"line-number"},[s._v("992")]),t("br"),t("span",{staticClass:"line-number"},[s._v("993")]),t("br"),t("span",{staticClass:"line-number"},[s._v("994")]),t("br"),t("span",{staticClass:"line-number"},[s._v("995")]),t("br"),t("span",{staticClass:"line-number"},[s._v("996")]),t("br"),t("span",{staticClass:"line-number"},[s._v("997")]),t("br"),t("span",{staticClass:"line-number"},[s._v("998")]),t("br"),t("span",{staticClass:"line-number"},[s._v("999")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1000")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1001")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1002")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1003")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1004")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1005")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1006")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1007")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1008")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1009")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1010")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1011")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1012")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1013")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1014")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1015")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1016")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1017")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1018")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1019")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1020")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1021")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1022")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1023")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1024")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1025")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1026")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1027")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1028")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1029")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1030")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1031")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1032")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1033")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1034")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1035")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1036")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1037")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1038")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1039")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1040")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1041")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1042")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1043")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1044")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1045")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1046")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1047")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1048")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1049")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1050")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1051")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1052")]),t("br"),t("span",{staticClass:"line-number"},[s._v("1053")]),t("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);