(window.webpackJsonp=window.webpackJsonp||[]).push([[301],{866:function(t,e,v){"use strict";v.r(e);var _=v(6),n=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。")]),t._v(" "),v("p",[t._v("以下是一个简单的列表，我们会在后面的章节中对它们进行逐个深入的讲解。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("close")]),t._v(" "),v("td",[t._v("用于管道通信")])]),t._v(" "),v("tr",[v("td",[t._v("len、cap")]),t._v(" "),v("td",[t._v("len 用于返回某个类型的长度或数量（字符串、数组、切片、map 和管道）；cap 是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）")])]),t._v(" "),v("tr",[v("td",[t._v("new、make")]),t._v(" "),v("td",[t._v("new 和 make 均是用于分配内存：new 用于值类型和用户定义的类型，如自定义结构，make 用于内置引用类型（切片、map 和管道）。它们的用法就像是函数，但是将类型作为参数：new(type)、make(type)。new(T) 分配类型 T 的零值并返回其地址，也就是指向类型 T 的指针（详见第 10.1 节）。它也可以被用于基本类型："),v("code",[t._v("v := new(int)")]),t._v("。make(T) 返回类型 T 的初始化之后的值，因此它比 new 进行更多的工作（详见第 7.2.3/4 节、第 8.1.1 节和第 14.2.1 节）"),v("strong",[t._v("new() 是一个函数，不要忘记它的括号")])])]),t._v(" "),v("tr",[v("td",[t._v("copy、append")]),t._v(" "),v("td",[t._v("用于复制和连接切片")])]),t._v(" "),v("tr",[v("td",[t._v("panic、recover")]),t._v(" "),v("td",[t._v("两者均用于错误处理机制")])]),t._v(" "),v("tr",[v("td",[t._v("print、println")]),t._v(" "),v("td",[t._v("底层打印函数（详见第 4.2 节），在部署环境中建议使用 fmt 包")])]),t._v(" "),v("tr",[v("td",[t._v("complex、real imag")]),t._v(" "),v("td",[t._v("用于创建和操作复数（详见第 4.5.2.2 节）")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);